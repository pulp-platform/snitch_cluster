// Copyright lowRISC contributors.
// Licensed under the Apache License, Version 2.0, see LICENSE for details.
// SPDX-License-Identifier: Apache-2.0
//
// Register Top module auto-generated by `reggen`


`include "common_cells/assertions.svh"

module snitch_cluster_peripheral_reg_top #(
  parameter type reg_req_t = logic,
  parameter type reg_rsp_t = logic,
  parameter int AW = 9
) (
  input logic clk_i,
  input logic rst_ni,
  input  reg_req_t reg_req_i,
  output reg_rsp_t reg_rsp_o,
  // To HW
  output snitch_cluster_peripheral_reg_pkg::snitch_cluster_peripheral_reg2hw_t reg2hw, // Write
  input  snitch_cluster_peripheral_reg_pkg::snitch_cluster_peripheral_hw2reg_t hw2reg, // Read


  // Config
  input devmode_i // If 1, explicit error return for unmapped register access
);

  import snitch_cluster_peripheral_reg_pkg::* ;

  localparam int DW = 64;
  localparam int DBW = DW/8;                    // Byte Width

  // register signals
  logic           reg_we;
  logic           reg_re;
  logic [BlockAw-1:0]  reg_addr;
  logic [DW-1:0]  reg_wdata;
  logic [DBW-1:0] reg_be;
  logic [DW-1:0]  reg_rdata;
  logic           reg_error;

  logic          addrmiss, wr_err;

  logic [DW-1:0] reg_rdata_next;

  // Below register interface can be changed
  reg_req_t  reg_intf_req;
  reg_rsp_t  reg_intf_rsp;


  assign reg_intf_req = reg_req_i;
  assign reg_rsp_o = reg_intf_rsp;


  assign reg_we = reg_intf_req.valid & reg_intf_req.write;
  assign reg_re = reg_intf_req.valid & ~reg_intf_req.write;
  assign reg_addr = reg_intf_req.addr[BlockAw-1:0];
  assign reg_wdata = reg_intf_req.wdata;
  assign reg_be = reg_intf_req.wstrb;
  assign reg_intf_rsp.rdata = reg_rdata;
  assign reg_intf_rsp.error = reg_error;
  assign reg_intf_rsp.ready = 1'b1;

  assign reg_rdata = reg_rdata_next ;
  assign reg_error = (devmode_i & addrmiss) | wr_err;


  // Define SW related signals
  // Format: <reg>_<field>_{wd|we|qs}
  //        or <reg>_{wd|we|qs} if field == 1 or 0
  logic perf_cnt_en_0_qs;
  logic perf_cnt_en_0_wd;
  logic perf_cnt_en_0_we;
  logic perf_cnt_en_1_qs;
  logic perf_cnt_en_1_wd;
  logic perf_cnt_en_1_we;
  logic perf_cnt_en_2_qs;
  logic perf_cnt_en_2_wd;
  logic perf_cnt_en_2_we;
  logic perf_cnt_en_3_qs;
  logic perf_cnt_en_3_wd;
  logic perf_cnt_en_3_we;
  logic perf_cnt_en_4_qs;
  logic perf_cnt_en_4_wd;
  logic perf_cnt_en_4_we;
  logic perf_cnt_en_5_qs;
  logic perf_cnt_en_5_wd;
  logic perf_cnt_en_5_we;
  logic perf_cnt_en_6_qs;
  logic perf_cnt_en_6_wd;
  logic perf_cnt_en_6_we;
  logic perf_cnt_en_7_qs;
  logic perf_cnt_en_7_wd;
  logic perf_cnt_en_7_we;
  logic perf_cnt_en_8_qs;
  logic perf_cnt_en_8_wd;
  logic perf_cnt_en_8_we;
  logic perf_cnt_en_9_qs;
  logic perf_cnt_en_9_wd;
  logic perf_cnt_en_9_we;
  logic perf_cnt_en_10_qs;
  logic perf_cnt_en_10_wd;
  logic perf_cnt_en_10_we;
  logic perf_cnt_en_11_qs;
  logic perf_cnt_en_11_wd;
  logic perf_cnt_en_11_we;
  logic perf_cnt_en_12_qs;
  logic perf_cnt_en_12_wd;
  logic perf_cnt_en_12_we;
  logic perf_cnt_en_13_qs;
  logic perf_cnt_en_13_wd;
  logic perf_cnt_en_13_we;
  logic perf_cnt_en_14_qs;
  logic perf_cnt_en_14_wd;
  logic perf_cnt_en_14_we;
  logic perf_cnt_en_15_qs;
  logic perf_cnt_en_15_wd;
  logic perf_cnt_en_15_we;
  logic [15:0] perf_cnt_sel_0_hart_0_qs;
  logic [15:0] perf_cnt_sel_0_hart_0_wd;
  logic perf_cnt_sel_0_hart_0_we;
  logic perf_cnt_sel_0_hart_0_re;
  logic [15:0] perf_cnt_sel_0_metric_0_qs;
  logic [15:0] perf_cnt_sel_0_metric_0_wd;
  logic perf_cnt_sel_0_metric_0_we;
  logic perf_cnt_sel_0_metric_0_re;
  logic [15:0] perf_cnt_sel_1_hart_1_qs;
  logic [15:0] perf_cnt_sel_1_hart_1_wd;
  logic perf_cnt_sel_1_hart_1_we;
  logic perf_cnt_sel_1_hart_1_re;
  logic [15:0] perf_cnt_sel_1_metric_1_qs;
  logic [15:0] perf_cnt_sel_1_metric_1_wd;
  logic perf_cnt_sel_1_metric_1_we;
  logic perf_cnt_sel_1_metric_1_re;
  logic [15:0] perf_cnt_sel_2_hart_2_qs;
  logic [15:0] perf_cnt_sel_2_hart_2_wd;
  logic perf_cnt_sel_2_hart_2_we;
  logic perf_cnt_sel_2_hart_2_re;
  logic [15:0] perf_cnt_sel_2_metric_2_qs;
  logic [15:0] perf_cnt_sel_2_metric_2_wd;
  logic perf_cnt_sel_2_metric_2_we;
  logic perf_cnt_sel_2_metric_2_re;
  logic [15:0] perf_cnt_sel_3_hart_3_qs;
  logic [15:0] perf_cnt_sel_3_hart_3_wd;
  logic perf_cnt_sel_3_hart_3_we;
  logic perf_cnt_sel_3_hart_3_re;
  logic [15:0] perf_cnt_sel_3_metric_3_qs;
  logic [15:0] perf_cnt_sel_3_metric_3_wd;
  logic perf_cnt_sel_3_metric_3_we;
  logic perf_cnt_sel_3_metric_3_re;
  logic [15:0] perf_cnt_sel_4_hart_4_qs;
  logic [15:0] perf_cnt_sel_4_hart_4_wd;
  logic perf_cnt_sel_4_hart_4_we;
  logic perf_cnt_sel_4_hart_4_re;
  logic [15:0] perf_cnt_sel_4_metric_4_qs;
  logic [15:0] perf_cnt_sel_4_metric_4_wd;
  logic perf_cnt_sel_4_metric_4_we;
  logic perf_cnt_sel_4_metric_4_re;
  logic [15:0] perf_cnt_sel_5_hart_5_qs;
  logic [15:0] perf_cnt_sel_5_hart_5_wd;
  logic perf_cnt_sel_5_hart_5_we;
  logic perf_cnt_sel_5_hart_5_re;
  logic [15:0] perf_cnt_sel_5_metric_5_qs;
  logic [15:0] perf_cnt_sel_5_metric_5_wd;
  logic perf_cnt_sel_5_metric_5_we;
  logic perf_cnt_sel_5_metric_5_re;
  logic [15:0] perf_cnt_sel_6_hart_6_qs;
  logic [15:0] perf_cnt_sel_6_hart_6_wd;
  logic perf_cnt_sel_6_hart_6_we;
  logic perf_cnt_sel_6_hart_6_re;
  logic [15:0] perf_cnt_sel_6_metric_6_qs;
  logic [15:0] perf_cnt_sel_6_metric_6_wd;
  logic perf_cnt_sel_6_metric_6_we;
  logic perf_cnt_sel_6_metric_6_re;
  logic [15:0] perf_cnt_sel_7_hart_7_qs;
  logic [15:0] perf_cnt_sel_7_hart_7_wd;
  logic perf_cnt_sel_7_hart_7_we;
  logic perf_cnt_sel_7_hart_7_re;
  logic [15:0] perf_cnt_sel_7_metric_7_qs;
  logic [15:0] perf_cnt_sel_7_metric_7_wd;
  logic perf_cnt_sel_7_metric_7_we;
  logic perf_cnt_sel_7_metric_7_re;
  logic [15:0] perf_cnt_sel_8_hart_8_qs;
  logic [15:0] perf_cnt_sel_8_hart_8_wd;
  logic perf_cnt_sel_8_hart_8_we;
  logic perf_cnt_sel_8_hart_8_re;
  logic [15:0] perf_cnt_sel_8_metric_8_qs;
  logic [15:0] perf_cnt_sel_8_metric_8_wd;
  logic perf_cnt_sel_8_metric_8_we;
  logic perf_cnt_sel_8_metric_8_re;
  logic [15:0] perf_cnt_sel_9_hart_9_qs;
  logic [15:0] perf_cnt_sel_9_hart_9_wd;
  logic perf_cnt_sel_9_hart_9_we;
  logic perf_cnt_sel_9_hart_9_re;
  logic [15:0] perf_cnt_sel_9_metric_9_qs;
  logic [15:0] perf_cnt_sel_9_metric_9_wd;
  logic perf_cnt_sel_9_metric_9_we;
  logic perf_cnt_sel_9_metric_9_re;
  logic [15:0] perf_cnt_sel_10_hart_10_qs;
  logic [15:0] perf_cnt_sel_10_hart_10_wd;
  logic perf_cnt_sel_10_hart_10_we;
  logic perf_cnt_sel_10_hart_10_re;
  logic [15:0] perf_cnt_sel_10_metric_10_qs;
  logic [15:0] perf_cnt_sel_10_metric_10_wd;
  logic perf_cnt_sel_10_metric_10_we;
  logic perf_cnt_sel_10_metric_10_re;
  logic [15:0] perf_cnt_sel_11_hart_11_qs;
  logic [15:0] perf_cnt_sel_11_hart_11_wd;
  logic perf_cnt_sel_11_hart_11_we;
  logic perf_cnt_sel_11_hart_11_re;
  logic [15:0] perf_cnt_sel_11_metric_11_qs;
  logic [15:0] perf_cnt_sel_11_metric_11_wd;
  logic perf_cnt_sel_11_metric_11_we;
  logic perf_cnt_sel_11_metric_11_re;
  logic [15:0] perf_cnt_sel_12_hart_12_qs;
  logic [15:0] perf_cnt_sel_12_hart_12_wd;
  logic perf_cnt_sel_12_hart_12_we;
  logic perf_cnt_sel_12_hart_12_re;
  logic [15:0] perf_cnt_sel_12_metric_12_qs;
  logic [15:0] perf_cnt_sel_12_metric_12_wd;
  logic perf_cnt_sel_12_metric_12_we;
  logic perf_cnt_sel_12_metric_12_re;
  logic [15:0] perf_cnt_sel_13_hart_13_qs;
  logic [15:0] perf_cnt_sel_13_hart_13_wd;
  logic perf_cnt_sel_13_hart_13_we;
  logic perf_cnt_sel_13_hart_13_re;
  logic [15:0] perf_cnt_sel_13_metric_13_qs;
  logic [15:0] perf_cnt_sel_13_metric_13_wd;
  logic perf_cnt_sel_13_metric_13_we;
  logic perf_cnt_sel_13_metric_13_re;
  logic [15:0] perf_cnt_sel_14_hart_14_qs;
  logic [15:0] perf_cnt_sel_14_hart_14_wd;
  logic perf_cnt_sel_14_hart_14_we;
  logic perf_cnt_sel_14_hart_14_re;
  logic [15:0] perf_cnt_sel_14_metric_14_qs;
  logic [15:0] perf_cnt_sel_14_metric_14_wd;
  logic perf_cnt_sel_14_metric_14_we;
  logic perf_cnt_sel_14_metric_14_re;
  logic [15:0] perf_cnt_sel_15_hart_15_qs;
  logic [15:0] perf_cnt_sel_15_hart_15_wd;
  logic perf_cnt_sel_15_hart_15_we;
  logic perf_cnt_sel_15_hart_15_re;
  logic [15:0] perf_cnt_sel_15_metric_15_qs;
  logic [15:0] perf_cnt_sel_15_metric_15_wd;
  logic perf_cnt_sel_15_metric_15_we;
  logic perf_cnt_sel_15_metric_15_re;
  logic [47:0] perf_cnt_0_qs;
  logic [47:0] perf_cnt_0_wd;
  logic perf_cnt_0_we;
  logic perf_cnt_0_re;
  logic [47:0] perf_cnt_1_qs;
  logic [47:0] perf_cnt_1_wd;
  logic perf_cnt_1_we;
  logic perf_cnt_1_re;
  logic [47:0] perf_cnt_2_qs;
  logic [47:0] perf_cnt_2_wd;
  logic perf_cnt_2_we;
  logic perf_cnt_2_re;
  logic [47:0] perf_cnt_3_qs;
  logic [47:0] perf_cnt_3_wd;
  logic perf_cnt_3_we;
  logic perf_cnt_3_re;
  logic [47:0] perf_cnt_4_qs;
  logic [47:0] perf_cnt_4_wd;
  logic perf_cnt_4_we;
  logic perf_cnt_4_re;
  logic [47:0] perf_cnt_5_qs;
  logic [47:0] perf_cnt_5_wd;
  logic perf_cnt_5_we;
  logic perf_cnt_5_re;
  logic [47:0] perf_cnt_6_qs;
  logic [47:0] perf_cnt_6_wd;
  logic perf_cnt_6_we;
  logic perf_cnt_6_re;
  logic [47:0] perf_cnt_7_qs;
  logic [47:0] perf_cnt_7_wd;
  logic perf_cnt_7_we;
  logic perf_cnt_7_re;
  logic [47:0] perf_cnt_8_qs;
  logic [47:0] perf_cnt_8_wd;
  logic perf_cnt_8_we;
  logic perf_cnt_8_re;
  logic [47:0] perf_cnt_9_qs;
  logic [47:0] perf_cnt_9_wd;
  logic perf_cnt_9_we;
  logic perf_cnt_9_re;
  logic [47:0] perf_cnt_10_qs;
  logic [47:0] perf_cnt_10_wd;
  logic perf_cnt_10_we;
  logic perf_cnt_10_re;
  logic [47:0] perf_cnt_11_qs;
  logic [47:0] perf_cnt_11_wd;
  logic perf_cnt_11_we;
  logic perf_cnt_11_re;
  logic [47:0] perf_cnt_12_qs;
  logic [47:0] perf_cnt_12_wd;
  logic perf_cnt_12_we;
  logic perf_cnt_12_re;
  logic [47:0] perf_cnt_13_qs;
  logic [47:0] perf_cnt_13_wd;
  logic perf_cnt_13_we;
  logic perf_cnt_13_re;
  logic [47:0] perf_cnt_14_qs;
  logic [47:0] perf_cnt_14_wd;
  logic perf_cnt_14_we;
  logic perf_cnt_14_re;
  logic [47:0] perf_cnt_15_qs;
  logic [47:0] perf_cnt_15_wd;
  logic perf_cnt_15_we;
  logic perf_cnt_15_re;
  logic [31:0] cl_clint_set_wd;
  logic cl_clint_set_we;
  logic [31:0] cl_clint_clear_wd;
  logic cl_clint_clear_we;
  logic icache_prefetch_enable_wd;
  logic icache_prefetch_enable_we;

  // Register instances

  // Subregister 0 of Multireg perf_cnt_en
  // R[perf_cnt_en_0]: V(False)

  prim_subreg #(
    .DW      (1),
    .SWACCESS("RW"),
    .RESVAL  (1'h1)
  ) u_perf_cnt_en_0 (
    .clk_i   (clk_i    ),
    .rst_ni  (rst_ni  ),

    // from register interface
    .we     (perf_cnt_en_0_we),
    .wd     (perf_cnt_en_0_wd),

    // from internal hardware
    .de     (1'b0),
    .d      ('0  ),

    // to internal hardware
    .qe     (),
    .q      (reg2hw.perf_cnt_en[0].q ),

    // to register interface (read)
    .qs     (perf_cnt_en_0_qs)
  );

  // Subregister 1 of Multireg perf_cnt_en
  // R[perf_cnt_en_1]: V(False)

  prim_subreg #(
    .DW      (1),
    .SWACCESS("RW"),
    .RESVAL  (1'h1)
  ) u_perf_cnt_en_1 (
    .clk_i   (clk_i    ),
    .rst_ni  (rst_ni  ),

    // from register interface
    .we     (perf_cnt_en_1_we),
    .wd     (perf_cnt_en_1_wd),

    // from internal hardware
    .de     (1'b0),
    .d      ('0  ),

    // to internal hardware
    .qe     (),
    .q      (reg2hw.perf_cnt_en[1].q ),

    // to register interface (read)
    .qs     (perf_cnt_en_1_qs)
  );

  // Subregister 2 of Multireg perf_cnt_en
  // R[perf_cnt_en_2]: V(False)

  prim_subreg #(
    .DW      (1),
    .SWACCESS("RW"),
    .RESVAL  (1'h1)
  ) u_perf_cnt_en_2 (
    .clk_i   (clk_i    ),
    .rst_ni  (rst_ni  ),

    // from register interface
    .we     (perf_cnt_en_2_we),
    .wd     (perf_cnt_en_2_wd),

    // from internal hardware
    .de     (1'b0),
    .d      ('0  ),

    // to internal hardware
    .qe     (),
    .q      (reg2hw.perf_cnt_en[2].q ),

    // to register interface (read)
    .qs     (perf_cnt_en_2_qs)
  );

  // Subregister 3 of Multireg perf_cnt_en
  // R[perf_cnt_en_3]: V(False)

  prim_subreg #(
    .DW      (1),
    .SWACCESS("RW"),
    .RESVAL  (1'h1)
  ) u_perf_cnt_en_3 (
    .clk_i   (clk_i    ),
    .rst_ni  (rst_ni  ),

    // from register interface
    .we     (perf_cnt_en_3_we),
    .wd     (perf_cnt_en_3_wd),

    // from internal hardware
    .de     (1'b0),
    .d      ('0  ),

    // to internal hardware
    .qe     (),
    .q      (reg2hw.perf_cnt_en[3].q ),

    // to register interface (read)
    .qs     (perf_cnt_en_3_qs)
  );

  // Subregister 4 of Multireg perf_cnt_en
  // R[perf_cnt_en_4]: V(False)

  prim_subreg #(
    .DW      (1),
    .SWACCESS("RW"),
    .RESVAL  (1'h1)
  ) u_perf_cnt_en_4 (
    .clk_i   (clk_i    ),
    .rst_ni  (rst_ni  ),

    // from register interface
    .we     (perf_cnt_en_4_we),
    .wd     (perf_cnt_en_4_wd),

    // from internal hardware
    .de     (1'b0),
    .d      ('0  ),

    // to internal hardware
    .qe     (),
    .q      (reg2hw.perf_cnt_en[4].q ),

    // to register interface (read)
    .qs     (perf_cnt_en_4_qs)
  );

  // Subregister 5 of Multireg perf_cnt_en
  // R[perf_cnt_en_5]: V(False)

  prim_subreg #(
    .DW      (1),
    .SWACCESS("RW"),
    .RESVAL  (1'h1)
  ) u_perf_cnt_en_5 (
    .clk_i   (clk_i    ),
    .rst_ni  (rst_ni  ),

    // from register interface
    .we     (perf_cnt_en_5_we),
    .wd     (perf_cnt_en_5_wd),

    // from internal hardware
    .de     (1'b0),
    .d      ('0  ),

    // to internal hardware
    .qe     (),
    .q      (reg2hw.perf_cnt_en[5].q ),

    // to register interface (read)
    .qs     (perf_cnt_en_5_qs)
  );

  // Subregister 6 of Multireg perf_cnt_en
  // R[perf_cnt_en_6]: V(False)

  prim_subreg #(
    .DW      (1),
    .SWACCESS("RW"),
    .RESVAL  (1'h1)
  ) u_perf_cnt_en_6 (
    .clk_i   (clk_i    ),
    .rst_ni  (rst_ni  ),

    // from register interface
    .we     (perf_cnt_en_6_we),
    .wd     (perf_cnt_en_6_wd),

    // from internal hardware
    .de     (1'b0),
    .d      ('0  ),

    // to internal hardware
    .qe     (),
    .q      (reg2hw.perf_cnt_en[6].q ),

    // to register interface (read)
    .qs     (perf_cnt_en_6_qs)
  );

  // Subregister 7 of Multireg perf_cnt_en
  // R[perf_cnt_en_7]: V(False)

  prim_subreg #(
    .DW      (1),
    .SWACCESS("RW"),
    .RESVAL  (1'h1)
  ) u_perf_cnt_en_7 (
    .clk_i   (clk_i    ),
    .rst_ni  (rst_ni  ),

    // from register interface
    .we     (perf_cnt_en_7_we),
    .wd     (perf_cnt_en_7_wd),

    // from internal hardware
    .de     (1'b0),
    .d      ('0  ),

    // to internal hardware
    .qe     (),
    .q      (reg2hw.perf_cnt_en[7].q ),

    // to register interface (read)
    .qs     (perf_cnt_en_7_qs)
  );

  // Subregister 8 of Multireg perf_cnt_en
  // R[perf_cnt_en_8]: V(False)

  prim_subreg #(
    .DW      (1),
    .SWACCESS("RW"),
    .RESVAL  (1'h1)
  ) u_perf_cnt_en_8 (
    .clk_i   (clk_i    ),
    .rst_ni  (rst_ni  ),

    // from register interface
    .we     (perf_cnt_en_8_we),
    .wd     (perf_cnt_en_8_wd),

    // from internal hardware
    .de     (1'b0),
    .d      ('0  ),

    // to internal hardware
    .qe     (),
    .q      (reg2hw.perf_cnt_en[8].q ),

    // to register interface (read)
    .qs     (perf_cnt_en_8_qs)
  );

  // Subregister 9 of Multireg perf_cnt_en
  // R[perf_cnt_en_9]: V(False)

  prim_subreg #(
    .DW      (1),
    .SWACCESS("RW"),
    .RESVAL  (1'h1)
  ) u_perf_cnt_en_9 (
    .clk_i   (clk_i    ),
    .rst_ni  (rst_ni  ),

    // from register interface
    .we     (perf_cnt_en_9_we),
    .wd     (perf_cnt_en_9_wd),

    // from internal hardware
    .de     (1'b0),
    .d      ('0  ),

    // to internal hardware
    .qe     (),
    .q      (reg2hw.perf_cnt_en[9].q ),

    // to register interface (read)
    .qs     (perf_cnt_en_9_qs)
  );

  // Subregister 10 of Multireg perf_cnt_en
  // R[perf_cnt_en_10]: V(False)

  prim_subreg #(
    .DW      (1),
    .SWACCESS("RW"),
    .RESVAL  (1'h1)
  ) u_perf_cnt_en_10 (
    .clk_i   (clk_i    ),
    .rst_ni  (rst_ni  ),

    // from register interface
    .we     (perf_cnt_en_10_we),
    .wd     (perf_cnt_en_10_wd),

    // from internal hardware
    .de     (1'b0),
    .d      ('0  ),

    // to internal hardware
    .qe     (),
    .q      (reg2hw.perf_cnt_en[10].q ),

    // to register interface (read)
    .qs     (perf_cnt_en_10_qs)
  );

  // Subregister 11 of Multireg perf_cnt_en
  // R[perf_cnt_en_11]: V(False)

  prim_subreg #(
    .DW      (1),
    .SWACCESS("RW"),
    .RESVAL  (1'h1)
  ) u_perf_cnt_en_11 (
    .clk_i   (clk_i    ),
    .rst_ni  (rst_ni  ),

    // from register interface
    .we     (perf_cnt_en_11_we),
    .wd     (perf_cnt_en_11_wd),

    // from internal hardware
    .de     (1'b0),
    .d      ('0  ),

    // to internal hardware
    .qe     (),
    .q      (reg2hw.perf_cnt_en[11].q ),

    // to register interface (read)
    .qs     (perf_cnt_en_11_qs)
  );

  // Subregister 12 of Multireg perf_cnt_en
  // R[perf_cnt_en_12]: V(False)

  prim_subreg #(
    .DW      (1),
    .SWACCESS("RW"),
    .RESVAL  (1'h1)
  ) u_perf_cnt_en_12 (
    .clk_i   (clk_i    ),
    .rst_ni  (rst_ni  ),

    // from register interface
    .we     (perf_cnt_en_12_we),
    .wd     (perf_cnt_en_12_wd),

    // from internal hardware
    .de     (1'b0),
    .d      ('0  ),

    // to internal hardware
    .qe     (),
    .q      (reg2hw.perf_cnt_en[12].q ),

    // to register interface (read)
    .qs     (perf_cnt_en_12_qs)
  );

  // Subregister 13 of Multireg perf_cnt_en
  // R[perf_cnt_en_13]: V(False)

  prim_subreg #(
    .DW      (1),
    .SWACCESS("RW"),
    .RESVAL  (1'h1)
  ) u_perf_cnt_en_13 (
    .clk_i   (clk_i    ),
    .rst_ni  (rst_ni  ),

    // from register interface
    .we     (perf_cnt_en_13_we),
    .wd     (perf_cnt_en_13_wd),

    // from internal hardware
    .de     (1'b0),
    .d      ('0  ),

    // to internal hardware
    .qe     (),
    .q      (reg2hw.perf_cnt_en[13].q ),

    // to register interface (read)
    .qs     (perf_cnt_en_13_qs)
  );

  // Subregister 14 of Multireg perf_cnt_en
  // R[perf_cnt_en_14]: V(False)

  prim_subreg #(
    .DW      (1),
    .SWACCESS("RW"),
    .RESVAL  (1'h1)
  ) u_perf_cnt_en_14 (
    .clk_i   (clk_i    ),
    .rst_ni  (rst_ni  ),

    // from register interface
    .we     (perf_cnt_en_14_we),
    .wd     (perf_cnt_en_14_wd),

    // from internal hardware
    .de     (1'b0),
    .d      ('0  ),

    // to internal hardware
    .qe     (),
    .q      (reg2hw.perf_cnt_en[14].q ),

    // to register interface (read)
    .qs     (perf_cnt_en_14_qs)
  );

  // Subregister 15 of Multireg perf_cnt_en
  // R[perf_cnt_en_15]: V(False)

  prim_subreg #(
    .DW      (1),
    .SWACCESS("RW"),
    .RESVAL  (1'h1)
  ) u_perf_cnt_en_15 (
    .clk_i   (clk_i    ),
    .rst_ni  (rst_ni  ),

    // from register interface
    .we     (perf_cnt_en_15_we),
    .wd     (perf_cnt_en_15_wd),

    // from internal hardware
    .de     (1'b0),
    .d      ('0  ),

    // to internal hardware
    .qe     (),
    .q      (reg2hw.perf_cnt_en[15].q ),

    // to register interface (read)
    .qs     (perf_cnt_en_15_qs)
  );



  // Subregister 0 of Multireg perf_cnt_sel
  // R[perf_cnt_sel_0]: V(True)

  // F[hart_0]: 15:0
  prim_subreg_ext #(
    .DW    (16)
  ) u_perf_cnt_sel_0_hart_0 (
    .re     (perf_cnt_sel_0_hart_0_re),
    .we     (perf_cnt_sel_0_hart_0_we),
    .wd     (perf_cnt_sel_0_hart_0_wd),
    .d      (hw2reg.perf_cnt_sel[0].hart.d),
    .qre    (),
    .qe     (reg2hw.perf_cnt_sel[0].hart.qe),
    .q      (reg2hw.perf_cnt_sel[0].hart.q ),
    .qs     (perf_cnt_sel_0_hart_0_qs)
  );


  // F[metric_0]: 31:16
  prim_subreg_ext #(
    .DW    (16)
  ) u_perf_cnt_sel_0_metric_0 (
    .re     (perf_cnt_sel_0_metric_0_re),
    .we     (perf_cnt_sel_0_metric_0_we),
    .wd     (perf_cnt_sel_0_metric_0_wd),
    .d      (hw2reg.perf_cnt_sel[0].metric.d),
    .qre    (),
    .qe     (reg2hw.perf_cnt_sel[0].metric.qe),
    .q      (reg2hw.perf_cnt_sel[0].metric.q ),
    .qs     (perf_cnt_sel_0_metric_0_qs)
  );


  // Subregister 1 of Multireg perf_cnt_sel
  // R[perf_cnt_sel_1]: V(True)

  // F[hart_1]: 15:0
  prim_subreg_ext #(
    .DW    (16)
  ) u_perf_cnt_sel_1_hart_1 (
    .re     (perf_cnt_sel_1_hart_1_re),
    .we     (perf_cnt_sel_1_hart_1_we),
    .wd     (perf_cnt_sel_1_hart_1_wd),
    .d      (hw2reg.perf_cnt_sel[1].hart.d),
    .qre    (),
    .qe     (reg2hw.perf_cnt_sel[1].hart.qe),
    .q      (reg2hw.perf_cnt_sel[1].hart.q ),
    .qs     (perf_cnt_sel_1_hart_1_qs)
  );


  // F[metric_1]: 31:16
  prim_subreg_ext #(
    .DW    (16)
  ) u_perf_cnt_sel_1_metric_1 (
    .re     (perf_cnt_sel_1_metric_1_re),
    .we     (perf_cnt_sel_1_metric_1_we),
    .wd     (perf_cnt_sel_1_metric_1_wd),
    .d      (hw2reg.perf_cnt_sel[1].metric.d),
    .qre    (),
    .qe     (reg2hw.perf_cnt_sel[1].metric.qe),
    .q      (reg2hw.perf_cnt_sel[1].metric.q ),
    .qs     (perf_cnt_sel_1_metric_1_qs)
  );


  // Subregister 2 of Multireg perf_cnt_sel
  // R[perf_cnt_sel_2]: V(True)

  // F[hart_2]: 15:0
  prim_subreg_ext #(
    .DW    (16)
  ) u_perf_cnt_sel_2_hart_2 (
    .re     (perf_cnt_sel_2_hart_2_re),
    .we     (perf_cnt_sel_2_hart_2_we),
    .wd     (perf_cnt_sel_2_hart_2_wd),
    .d      (hw2reg.perf_cnt_sel[2].hart.d),
    .qre    (),
    .qe     (reg2hw.perf_cnt_sel[2].hart.qe),
    .q      (reg2hw.perf_cnt_sel[2].hart.q ),
    .qs     (perf_cnt_sel_2_hart_2_qs)
  );


  // F[metric_2]: 31:16
  prim_subreg_ext #(
    .DW    (16)
  ) u_perf_cnt_sel_2_metric_2 (
    .re     (perf_cnt_sel_2_metric_2_re),
    .we     (perf_cnt_sel_2_metric_2_we),
    .wd     (perf_cnt_sel_2_metric_2_wd),
    .d      (hw2reg.perf_cnt_sel[2].metric.d),
    .qre    (),
    .qe     (reg2hw.perf_cnt_sel[2].metric.qe),
    .q      (reg2hw.perf_cnt_sel[2].metric.q ),
    .qs     (perf_cnt_sel_2_metric_2_qs)
  );


  // Subregister 3 of Multireg perf_cnt_sel
  // R[perf_cnt_sel_3]: V(True)

  // F[hart_3]: 15:0
  prim_subreg_ext #(
    .DW    (16)
  ) u_perf_cnt_sel_3_hart_3 (
    .re     (perf_cnt_sel_3_hart_3_re),
    .we     (perf_cnt_sel_3_hart_3_we),
    .wd     (perf_cnt_sel_3_hart_3_wd),
    .d      (hw2reg.perf_cnt_sel[3].hart.d),
    .qre    (),
    .qe     (reg2hw.perf_cnt_sel[3].hart.qe),
    .q      (reg2hw.perf_cnt_sel[3].hart.q ),
    .qs     (perf_cnt_sel_3_hart_3_qs)
  );


  // F[metric_3]: 31:16
  prim_subreg_ext #(
    .DW    (16)
  ) u_perf_cnt_sel_3_metric_3 (
    .re     (perf_cnt_sel_3_metric_3_re),
    .we     (perf_cnt_sel_3_metric_3_we),
    .wd     (perf_cnt_sel_3_metric_3_wd),
    .d      (hw2reg.perf_cnt_sel[3].metric.d),
    .qre    (),
    .qe     (reg2hw.perf_cnt_sel[3].metric.qe),
    .q      (reg2hw.perf_cnt_sel[3].metric.q ),
    .qs     (perf_cnt_sel_3_metric_3_qs)
  );


  // Subregister 4 of Multireg perf_cnt_sel
  // R[perf_cnt_sel_4]: V(True)

  // F[hart_4]: 15:0
  prim_subreg_ext #(
    .DW    (16)
  ) u_perf_cnt_sel_4_hart_4 (
    .re     (perf_cnt_sel_4_hart_4_re),
    .we     (perf_cnt_sel_4_hart_4_we),
    .wd     (perf_cnt_sel_4_hart_4_wd),
    .d      (hw2reg.perf_cnt_sel[4].hart.d),
    .qre    (),
    .qe     (reg2hw.perf_cnt_sel[4].hart.qe),
    .q      (reg2hw.perf_cnt_sel[4].hart.q ),
    .qs     (perf_cnt_sel_4_hart_4_qs)
  );


  // F[metric_4]: 31:16
  prim_subreg_ext #(
    .DW    (16)
  ) u_perf_cnt_sel_4_metric_4 (
    .re     (perf_cnt_sel_4_metric_4_re),
    .we     (perf_cnt_sel_4_metric_4_we),
    .wd     (perf_cnt_sel_4_metric_4_wd),
    .d      (hw2reg.perf_cnt_sel[4].metric.d),
    .qre    (),
    .qe     (reg2hw.perf_cnt_sel[4].metric.qe),
    .q      (reg2hw.perf_cnt_sel[4].metric.q ),
    .qs     (perf_cnt_sel_4_metric_4_qs)
  );


  // Subregister 5 of Multireg perf_cnt_sel
  // R[perf_cnt_sel_5]: V(True)

  // F[hart_5]: 15:0
  prim_subreg_ext #(
    .DW    (16)
  ) u_perf_cnt_sel_5_hart_5 (
    .re     (perf_cnt_sel_5_hart_5_re),
    .we     (perf_cnt_sel_5_hart_5_we),
    .wd     (perf_cnt_sel_5_hart_5_wd),
    .d      (hw2reg.perf_cnt_sel[5].hart.d),
    .qre    (),
    .qe     (reg2hw.perf_cnt_sel[5].hart.qe),
    .q      (reg2hw.perf_cnt_sel[5].hart.q ),
    .qs     (perf_cnt_sel_5_hart_5_qs)
  );


  // F[metric_5]: 31:16
  prim_subreg_ext #(
    .DW    (16)
  ) u_perf_cnt_sel_5_metric_5 (
    .re     (perf_cnt_sel_5_metric_5_re),
    .we     (perf_cnt_sel_5_metric_5_we),
    .wd     (perf_cnt_sel_5_metric_5_wd),
    .d      (hw2reg.perf_cnt_sel[5].metric.d),
    .qre    (),
    .qe     (reg2hw.perf_cnt_sel[5].metric.qe),
    .q      (reg2hw.perf_cnt_sel[5].metric.q ),
    .qs     (perf_cnt_sel_5_metric_5_qs)
  );


  // Subregister 6 of Multireg perf_cnt_sel
  // R[perf_cnt_sel_6]: V(True)

  // F[hart_6]: 15:0
  prim_subreg_ext #(
    .DW    (16)
  ) u_perf_cnt_sel_6_hart_6 (
    .re     (perf_cnt_sel_6_hart_6_re),
    .we     (perf_cnt_sel_6_hart_6_we),
    .wd     (perf_cnt_sel_6_hart_6_wd),
    .d      (hw2reg.perf_cnt_sel[6].hart.d),
    .qre    (),
    .qe     (reg2hw.perf_cnt_sel[6].hart.qe),
    .q      (reg2hw.perf_cnt_sel[6].hart.q ),
    .qs     (perf_cnt_sel_6_hart_6_qs)
  );


  // F[metric_6]: 31:16
  prim_subreg_ext #(
    .DW    (16)
  ) u_perf_cnt_sel_6_metric_6 (
    .re     (perf_cnt_sel_6_metric_6_re),
    .we     (perf_cnt_sel_6_metric_6_we),
    .wd     (perf_cnt_sel_6_metric_6_wd),
    .d      (hw2reg.perf_cnt_sel[6].metric.d),
    .qre    (),
    .qe     (reg2hw.perf_cnt_sel[6].metric.qe),
    .q      (reg2hw.perf_cnt_sel[6].metric.q ),
    .qs     (perf_cnt_sel_6_metric_6_qs)
  );


  // Subregister 7 of Multireg perf_cnt_sel
  // R[perf_cnt_sel_7]: V(True)

  // F[hart_7]: 15:0
  prim_subreg_ext #(
    .DW    (16)
  ) u_perf_cnt_sel_7_hart_7 (
    .re     (perf_cnt_sel_7_hart_7_re),
    .we     (perf_cnt_sel_7_hart_7_we),
    .wd     (perf_cnt_sel_7_hart_7_wd),
    .d      (hw2reg.perf_cnt_sel[7].hart.d),
    .qre    (),
    .qe     (reg2hw.perf_cnt_sel[7].hart.qe),
    .q      (reg2hw.perf_cnt_sel[7].hart.q ),
    .qs     (perf_cnt_sel_7_hart_7_qs)
  );


  // F[metric_7]: 31:16
  prim_subreg_ext #(
    .DW    (16)
  ) u_perf_cnt_sel_7_metric_7 (
    .re     (perf_cnt_sel_7_metric_7_re),
    .we     (perf_cnt_sel_7_metric_7_we),
    .wd     (perf_cnt_sel_7_metric_7_wd),
    .d      (hw2reg.perf_cnt_sel[7].metric.d),
    .qre    (),
    .qe     (reg2hw.perf_cnt_sel[7].metric.qe),
    .q      (reg2hw.perf_cnt_sel[7].metric.q ),
    .qs     (perf_cnt_sel_7_metric_7_qs)
  );


  // Subregister 8 of Multireg perf_cnt_sel
  // R[perf_cnt_sel_8]: V(True)

  // F[hart_8]: 15:0
  prim_subreg_ext #(
    .DW    (16)
  ) u_perf_cnt_sel_8_hart_8 (
    .re     (perf_cnt_sel_8_hart_8_re),
    .we     (perf_cnt_sel_8_hart_8_we),
    .wd     (perf_cnt_sel_8_hart_8_wd),
    .d      (hw2reg.perf_cnt_sel[8].hart.d),
    .qre    (),
    .qe     (reg2hw.perf_cnt_sel[8].hart.qe),
    .q      (reg2hw.perf_cnt_sel[8].hart.q ),
    .qs     (perf_cnt_sel_8_hart_8_qs)
  );


  // F[metric_8]: 31:16
  prim_subreg_ext #(
    .DW    (16)
  ) u_perf_cnt_sel_8_metric_8 (
    .re     (perf_cnt_sel_8_metric_8_re),
    .we     (perf_cnt_sel_8_metric_8_we),
    .wd     (perf_cnt_sel_8_metric_8_wd),
    .d      (hw2reg.perf_cnt_sel[8].metric.d),
    .qre    (),
    .qe     (reg2hw.perf_cnt_sel[8].metric.qe),
    .q      (reg2hw.perf_cnt_sel[8].metric.q ),
    .qs     (perf_cnt_sel_8_metric_8_qs)
  );


  // Subregister 9 of Multireg perf_cnt_sel
  // R[perf_cnt_sel_9]: V(True)

  // F[hart_9]: 15:0
  prim_subreg_ext #(
    .DW    (16)
  ) u_perf_cnt_sel_9_hart_9 (
    .re     (perf_cnt_sel_9_hart_9_re),
    .we     (perf_cnt_sel_9_hart_9_we),
    .wd     (perf_cnt_sel_9_hart_9_wd),
    .d      (hw2reg.perf_cnt_sel[9].hart.d),
    .qre    (),
    .qe     (reg2hw.perf_cnt_sel[9].hart.qe),
    .q      (reg2hw.perf_cnt_sel[9].hart.q ),
    .qs     (perf_cnt_sel_9_hart_9_qs)
  );


  // F[metric_9]: 31:16
  prim_subreg_ext #(
    .DW    (16)
  ) u_perf_cnt_sel_9_metric_9 (
    .re     (perf_cnt_sel_9_metric_9_re),
    .we     (perf_cnt_sel_9_metric_9_we),
    .wd     (perf_cnt_sel_9_metric_9_wd),
    .d      (hw2reg.perf_cnt_sel[9].metric.d),
    .qre    (),
    .qe     (reg2hw.perf_cnt_sel[9].metric.qe),
    .q      (reg2hw.perf_cnt_sel[9].metric.q ),
    .qs     (perf_cnt_sel_9_metric_9_qs)
  );


  // Subregister 10 of Multireg perf_cnt_sel
  // R[perf_cnt_sel_10]: V(True)

  // F[hart_10]: 15:0
  prim_subreg_ext #(
    .DW    (16)
  ) u_perf_cnt_sel_10_hart_10 (
    .re     (perf_cnt_sel_10_hart_10_re),
    .we     (perf_cnt_sel_10_hart_10_we),
    .wd     (perf_cnt_sel_10_hart_10_wd),
    .d      (hw2reg.perf_cnt_sel[10].hart.d),
    .qre    (),
    .qe     (reg2hw.perf_cnt_sel[10].hart.qe),
    .q      (reg2hw.perf_cnt_sel[10].hart.q ),
    .qs     (perf_cnt_sel_10_hart_10_qs)
  );


  // F[metric_10]: 31:16
  prim_subreg_ext #(
    .DW    (16)
  ) u_perf_cnt_sel_10_metric_10 (
    .re     (perf_cnt_sel_10_metric_10_re),
    .we     (perf_cnt_sel_10_metric_10_we),
    .wd     (perf_cnt_sel_10_metric_10_wd),
    .d      (hw2reg.perf_cnt_sel[10].metric.d),
    .qre    (),
    .qe     (reg2hw.perf_cnt_sel[10].metric.qe),
    .q      (reg2hw.perf_cnt_sel[10].metric.q ),
    .qs     (perf_cnt_sel_10_metric_10_qs)
  );


  // Subregister 11 of Multireg perf_cnt_sel
  // R[perf_cnt_sel_11]: V(True)

  // F[hart_11]: 15:0
  prim_subreg_ext #(
    .DW    (16)
  ) u_perf_cnt_sel_11_hart_11 (
    .re     (perf_cnt_sel_11_hart_11_re),
    .we     (perf_cnt_sel_11_hart_11_we),
    .wd     (perf_cnt_sel_11_hart_11_wd),
    .d      (hw2reg.perf_cnt_sel[11].hart.d),
    .qre    (),
    .qe     (reg2hw.perf_cnt_sel[11].hart.qe),
    .q      (reg2hw.perf_cnt_sel[11].hart.q ),
    .qs     (perf_cnt_sel_11_hart_11_qs)
  );


  // F[metric_11]: 31:16
  prim_subreg_ext #(
    .DW    (16)
  ) u_perf_cnt_sel_11_metric_11 (
    .re     (perf_cnt_sel_11_metric_11_re),
    .we     (perf_cnt_sel_11_metric_11_we),
    .wd     (perf_cnt_sel_11_metric_11_wd),
    .d      (hw2reg.perf_cnt_sel[11].metric.d),
    .qre    (),
    .qe     (reg2hw.perf_cnt_sel[11].metric.qe),
    .q      (reg2hw.perf_cnt_sel[11].metric.q ),
    .qs     (perf_cnt_sel_11_metric_11_qs)
  );


  // Subregister 12 of Multireg perf_cnt_sel
  // R[perf_cnt_sel_12]: V(True)

  // F[hart_12]: 15:0
  prim_subreg_ext #(
    .DW    (16)
  ) u_perf_cnt_sel_12_hart_12 (
    .re     (perf_cnt_sel_12_hart_12_re),
    .we     (perf_cnt_sel_12_hart_12_we),
    .wd     (perf_cnt_sel_12_hart_12_wd),
    .d      (hw2reg.perf_cnt_sel[12].hart.d),
    .qre    (),
    .qe     (reg2hw.perf_cnt_sel[12].hart.qe),
    .q      (reg2hw.perf_cnt_sel[12].hart.q ),
    .qs     (perf_cnt_sel_12_hart_12_qs)
  );


  // F[metric_12]: 31:16
  prim_subreg_ext #(
    .DW    (16)
  ) u_perf_cnt_sel_12_metric_12 (
    .re     (perf_cnt_sel_12_metric_12_re),
    .we     (perf_cnt_sel_12_metric_12_we),
    .wd     (perf_cnt_sel_12_metric_12_wd),
    .d      (hw2reg.perf_cnt_sel[12].metric.d),
    .qre    (),
    .qe     (reg2hw.perf_cnt_sel[12].metric.qe),
    .q      (reg2hw.perf_cnt_sel[12].metric.q ),
    .qs     (perf_cnt_sel_12_metric_12_qs)
  );


  // Subregister 13 of Multireg perf_cnt_sel
  // R[perf_cnt_sel_13]: V(True)

  // F[hart_13]: 15:0
  prim_subreg_ext #(
    .DW    (16)
  ) u_perf_cnt_sel_13_hart_13 (
    .re     (perf_cnt_sel_13_hart_13_re),
    .we     (perf_cnt_sel_13_hart_13_we),
    .wd     (perf_cnt_sel_13_hart_13_wd),
    .d      (hw2reg.perf_cnt_sel[13].hart.d),
    .qre    (),
    .qe     (reg2hw.perf_cnt_sel[13].hart.qe),
    .q      (reg2hw.perf_cnt_sel[13].hart.q ),
    .qs     (perf_cnt_sel_13_hart_13_qs)
  );


  // F[metric_13]: 31:16
  prim_subreg_ext #(
    .DW    (16)
  ) u_perf_cnt_sel_13_metric_13 (
    .re     (perf_cnt_sel_13_metric_13_re),
    .we     (perf_cnt_sel_13_metric_13_we),
    .wd     (perf_cnt_sel_13_metric_13_wd),
    .d      (hw2reg.perf_cnt_sel[13].metric.d),
    .qre    (),
    .qe     (reg2hw.perf_cnt_sel[13].metric.qe),
    .q      (reg2hw.perf_cnt_sel[13].metric.q ),
    .qs     (perf_cnt_sel_13_metric_13_qs)
  );


  // Subregister 14 of Multireg perf_cnt_sel
  // R[perf_cnt_sel_14]: V(True)

  // F[hart_14]: 15:0
  prim_subreg_ext #(
    .DW    (16)
  ) u_perf_cnt_sel_14_hart_14 (
    .re     (perf_cnt_sel_14_hart_14_re),
    .we     (perf_cnt_sel_14_hart_14_we),
    .wd     (perf_cnt_sel_14_hart_14_wd),
    .d      (hw2reg.perf_cnt_sel[14].hart.d),
    .qre    (),
    .qe     (reg2hw.perf_cnt_sel[14].hart.qe),
    .q      (reg2hw.perf_cnt_sel[14].hart.q ),
    .qs     (perf_cnt_sel_14_hart_14_qs)
  );


  // F[metric_14]: 31:16
  prim_subreg_ext #(
    .DW    (16)
  ) u_perf_cnt_sel_14_metric_14 (
    .re     (perf_cnt_sel_14_metric_14_re),
    .we     (perf_cnt_sel_14_metric_14_we),
    .wd     (perf_cnt_sel_14_metric_14_wd),
    .d      (hw2reg.perf_cnt_sel[14].metric.d),
    .qre    (),
    .qe     (reg2hw.perf_cnt_sel[14].metric.qe),
    .q      (reg2hw.perf_cnt_sel[14].metric.q ),
    .qs     (perf_cnt_sel_14_metric_14_qs)
  );


  // Subregister 15 of Multireg perf_cnt_sel
  // R[perf_cnt_sel_15]: V(True)

  // F[hart_15]: 15:0
  prim_subreg_ext #(
    .DW    (16)
  ) u_perf_cnt_sel_15_hart_15 (
    .re     (perf_cnt_sel_15_hart_15_re),
    .we     (perf_cnt_sel_15_hart_15_we),
    .wd     (perf_cnt_sel_15_hart_15_wd),
    .d      (hw2reg.perf_cnt_sel[15].hart.d),
    .qre    (),
    .qe     (reg2hw.perf_cnt_sel[15].hart.qe),
    .q      (reg2hw.perf_cnt_sel[15].hart.q ),
    .qs     (perf_cnt_sel_15_hart_15_qs)
  );


  // F[metric_15]: 31:16
  prim_subreg_ext #(
    .DW    (16)
  ) u_perf_cnt_sel_15_metric_15 (
    .re     (perf_cnt_sel_15_metric_15_re),
    .we     (perf_cnt_sel_15_metric_15_we),
    .wd     (perf_cnt_sel_15_metric_15_wd),
    .d      (hw2reg.perf_cnt_sel[15].metric.d),
    .qre    (),
    .qe     (reg2hw.perf_cnt_sel[15].metric.qe),
    .q      (reg2hw.perf_cnt_sel[15].metric.q ),
    .qs     (perf_cnt_sel_15_metric_15_qs)
  );




  // Subregister 0 of Multireg perf_cnt
  // R[perf_cnt_0]: V(True)

  prim_subreg_ext #(
    .DW    (48)
  ) u_perf_cnt_0 (
    .re     (perf_cnt_0_re),
    .we     (perf_cnt_0_we),
    .wd     (perf_cnt_0_wd),
    .d      (hw2reg.perf_cnt[0].d),
    .qre    (),
    .qe     (reg2hw.perf_cnt[0].qe),
    .q      (reg2hw.perf_cnt[0].q ),
    .qs     (perf_cnt_0_qs)
  );

  // Subregister 1 of Multireg perf_cnt
  // R[perf_cnt_1]: V(True)

  prim_subreg_ext #(
    .DW    (48)
  ) u_perf_cnt_1 (
    .re     (perf_cnt_1_re),
    .we     (perf_cnt_1_we),
    .wd     (perf_cnt_1_wd),
    .d      (hw2reg.perf_cnt[1].d),
    .qre    (),
    .qe     (reg2hw.perf_cnt[1].qe),
    .q      (reg2hw.perf_cnt[1].q ),
    .qs     (perf_cnt_1_qs)
  );

  // Subregister 2 of Multireg perf_cnt
  // R[perf_cnt_2]: V(True)

  prim_subreg_ext #(
    .DW    (48)
  ) u_perf_cnt_2 (
    .re     (perf_cnt_2_re),
    .we     (perf_cnt_2_we),
    .wd     (perf_cnt_2_wd),
    .d      (hw2reg.perf_cnt[2].d),
    .qre    (),
    .qe     (reg2hw.perf_cnt[2].qe),
    .q      (reg2hw.perf_cnt[2].q ),
    .qs     (perf_cnt_2_qs)
  );

  // Subregister 3 of Multireg perf_cnt
  // R[perf_cnt_3]: V(True)

  prim_subreg_ext #(
    .DW    (48)
  ) u_perf_cnt_3 (
    .re     (perf_cnt_3_re),
    .we     (perf_cnt_3_we),
    .wd     (perf_cnt_3_wd),
    .d      (hw2reg.perf_cnt[3].d),
    .qre    (),
    .qe     (reg2hw.perf_cnt[3].qe),
    .q      (reg2hw.perf_cnt[3].q ),
    .qs     (perf_cnt_3_qs)
  );

  // Subregister 4 of Multireg perf_cnt
  // R[perf_cnt_4]: V(True)

  prim_subreg_ext #(
    .DW    (48)
  ) u_perf_cnt_4 (
    .re     (perf_cnt_4_re),
    .we     (perf_cnt_4_we),
    .wd     (perf_cnt_4_wd),
    .d      (hw2reg.perf_cnt[4].d),
    .qre    (),
    .qe     (reg2hw.perf_cnt[4].qe),
    .q      (reg2hw.perf_cnt[4].q ),
    .qs     (perf_cnt_4_qs)
  );

  // Subregister 5 of Multireg perf_cnt
  // R[perf_cnt_5]: V(True)

  prim_subreg_ext #(
    .DW    (48)
  ) u_perf_cnt_5 (
    .re     (perf_cnt_5_re),
    .we     (perf_cnt_5_we),
    .wd     (perf_cnt_5_wd),
    .d      (hw2reg.perf_cnt[5].d),
    .qre    (),
    .qe     (reg2hw.perf_cnt[5].qe),
    .q      (reg2hw.perf_cnt[5].q ),
    .qs     (perf_cnt_5_qs)
  );

  // Subregister 6 of Multireg perf_cnt
  // R[perf_cnt_6]: V(True)

  prim_subreg_ext #(
    .DW    (48)
  ) u_perf_cnt_6 (
    .re     (perf_cnt_6_re),
    .we     (perf_cnt_6_we),
    .wd     (perf_cnt_6_wd),
    .d      (hw2reg.perf_cnt[6].d),
    .qre    (),
    .qe     (reg2hw.perf_cnt[6].qe),
    .q      (reg2hw.perf_cnt[6].q ),
    .qs     (perf_cnt_6_qs)
  );

  // Subregister 7 of Multireg perf_cnt
  // R[perf_cnt_7]: V(True)

  prim_subreg_ext #(
    .DW    (48)
  ) u_perf_cnt_7 (
    .re     (perf_cnt_7_re),
    .we     (perf_cnt_7_we),
    .wd     (perf_cnt_7_wd),
    .d      (hw2reg.perf_cnt[7].d),
    .qre    (),
    .qe     (reg2hw.perf_cnt[7].qe),
    .q      (reg2hw.perf_cnt[7].q ),
    .qs     (perf_cnt_7_qs)
  );

  // Subregister 8 of Multireg perf_cnt
  // R[perf_cnt_8]: V(True)

  prim_subreg_ext #(
    .DW    (48)
  ) u_perf_cnt_8 (
    .re     (perf_cnt_8_re),
    .we     (perf_cnt_8_we),
    .wd     (perf_cnt_8_wd),
    .d      (hw2reg.perf_cnt[8].d),
    .qre    (),
    .qe     (reg2hw.perf_cnt[8].qe),
    .q      (reg2hw.perf_cnt[8].q ),
    .qs     (perf_cnt_8_qs)
  );

  // Subregister 9 of Multireg perf_cnt
  // R[perf_cnt_9]: V(True)

  prim_subreg_ext #(
    .DW    (48)
  ) u_perf_cnt_9 (
    .re     (perf_cnt_9_re),
    .we     (perf_cnt_9_we),
    .wd     (perf_cnt_9_wd),
    .d      (hw2reg.perf_cnt[9].d),
    .qre    (),
    .qe     (reg2hw.perf_cnt[9].qe),
    .q      (reg2hw.perf_cnt[9].q ),
    .qs     (perf_cnt_9_qs)
  );

  // Subregister 10 of Multireg perf_cnt
  // R[perf_cnt_10]: V(True)

  prim_subreg_ext #(
    .DW    (48)
  ) u_perf_cnt_10 (
    .re     (perf_cnt_10_re),
    .we     (perf_cnt_10_we),
    .wd     (perf_cnt_10_wd),
    .d      (hw2reg.perf_cnt[10].d),
    .qre    (),
    .qe     (reg2hw.perf_cnt[10].qe),
    .q      (reg2hw.perf_cnt[10].q ),
    .qs     (perf_cnt_10_qs)
  );

  // Subregister 11 of Multireg perf_cnt
  // R[perf_cnt_11]: V(True)

  prim_subreg_ext #(
    .DW    (48)
  ) u_perf_cnt_11 (
    .re     (perf_cnt_11_re),
    .we     (perf_cnt_11_we),
    .wd     (perf_cnt_11_wd),
    .d      (hw2reg.perf_cnt[11].d),
    .qre    (),
    .qe     (reg2hw.perf_cnt[11].qe),
    .q      (reg2hw.perf_cnt[11].q ),
    .qs     (perf_cnt_11_qs)
  );

  // Subregister 12 of Multireg perf_cnt
  // R[perf_cnt_12]: V(True)

  prim_subreg_ext #(
    .DW    (48)
  ) u_perf_cnt_12 (
    .re     (perf_cnt_12_re),
    .we     (perf_cnt_12_we),
    .wd     (perf_cnt_12_wd),
    .d      (hw2reg.perf_cnt[12].d),
    .qre    (),
    .qe     (reg2hw.perf_cnt[12].qe),
    .q      (reg2hw.perf_cnt[12].q ),
    .qs     (perf_cnt_12_qs)
  );

  // Subregister 13 of Multireg perf_cnt
  // R[perf_cnt_13]: V(True)

  prim_subreg_ext #(
    .DW    (48)
  ) u_perf_cnt_13 (
    .re     (perf_cnt_13_re),
    .we     (perf_cnt_13_we),
    .wd     (perf_cnt_13_wd),
    .d      (hw2reg.perf_cnt[13].d),
    .qre    (),
    .qe     (reg2hw.perf_cnt[13].qe),
    .q      (reg2hw.perf_cnt[13].q ),
    .qs     (perf_cnt_13_qs)
  );

  // Subregister 14 of Multireg perf_cnt
  // R[perf_cnt_14]: V(True)

  prim_subreg_ext #(
    .DW    (48)
  ) u_perf_cnt_14 (
    .re     (perf_cnt_14_re),
    .we     (perf_cnt_14_we),
    .wd     (perf_cnt_14_wd),
    .d      (hw2reg.perf_cnt[14].d),
    .qre    (),
    .qe     (reg2hw.perf_cnt[14].qe),
    .q      (reg2hw.perf_cnt[14].q ),
    .qs     (perf_cnt_14_qs)
  );

  // Subregister 15 of Multireg perf_cnt
  // R[perf_cnt_15]: V(True)

  prim_subreg_ext #(
    .DW    (48)
  ) u_perf_cnt_15 (
    .re     (perf_cnt_15_re),
    .we     (perf_cnt_15_we),
    .wd     (perf_cnt_15_wd),
    .d      (hw2reg.perf_cnt[15].d),
    .qre    (),
    .qe     (reg2hw.perf_cnt[15].qe),
    .q      (reg2hw.perf_cnt[15].q ),
    .qs     (perf_cnt_15_qs)
  );


  // R[cl_clint_set]: V(True)

  prim_subreg_ext #(
    .DW    (32)
  ) u_cl_clint_set (
    .re     (1'b0),
    .we     (cl_clint_set_we),
    .wd     (cl_clint_set_wd),
    .d      ('0),
    .qre    (),
    .qe     (reg2hw.cl_clint_set.qe),
    .q      (reg2hw.cl_clint_set.q ),
    .qs     ()
  );


  // R[cl_clint_clear]: V(True)

  prim_subreg_ext #(
    .DW    (32)
  ) u_cl_clint_clear (
    .re     (1'b0),
    .we     (cl_clint_clear_we),
    .wd     (cl_clint_clear_wd),
    .d      ('0),
    .qre    (),
    .qe     (reg2hw.cl_clint_clear.qe),
    .q      (reg2hw.cl_clint_clear.q ),
    .qs     ()
  );


  // R[icache_prefetch_enable]: V(False)

  prim_subreg #(
    .DW      (1),
    .SWACCESS("WO"),
    .RESVAL  (1'h1)
  ) u_icache_prefetch_enable (
    .clk_i   (clk_i    ),
    .rst_ni  (rst_ni  ),

    // from register interface
    .we     (icache_prefetch_enable_we),
    .wd     (icache_prefetch_enable_wd),

    // from internal hardware
    .de     (1'b0),
    .d      ('0  ),

    // to internal hardware
    .qe     (),
    .q      (reg2hw.icache_prefetch_enable.q ),

    .qs     ()
  );




  logic [50:0] addr_hit;
  always_comb begin
    addr_hit = '0;
    addr_hit[ 0] = (reg_addr == SNITCH_CLUSTER_PERIPHERAL_PERF_CNT_EN_0_OFFSET);
    addr_hit[ 1] = (reg_addr == SNITCH_CLUSTER_PERIPHERAL_PERF_CNT_EN_1_OFFSET);
    addr_hit[ 2] = (reg_addr == SNITCH_CLUSTER_PERIPHERAL_PERF_CNT_EN_2_OFFSET);
    addr_hit[ 3] = (reg_addr == SNITCH_CLUSTER_PERIPHERAL_PERF_CNT_EN_3_OFFSET);
    addr_hit[ 4] = (reg_addr == SNITCH_CLUSTER_PERIPHERAL_PERF_CNT_EN_4_OFFSET);
    addr_hit[ 5] = (reg_addr == SNITCH_CLUSTER_PERIPHERAL_PERF_CNT_EN_5_OFFSET);
    addr_hit[ 6] = (reg_addr == SNITCH_CLUSTER_PERIPHERAL_PERF_CNT_EN_6_OFFSET);
    addr_hit[ 7] = (reg_addr == SNITCH_CLUSTER_PERIPHERAL_PERF_CNT_EN_7_OFFSET);
    addr_hit[ 8] = (reg_addr == SNITCH_CLUSTER_PERIPHERAL_PERF_CNT_EN_8_OFFSET);
    addr_hit[ 9] = (reg_addr == SNITCH_CLUSTER_PERIPHERAL_PERF_CNT_EN_9_OFFSET);
    addr_hit[10] = (reg_addr == SNITCH_CLUSTER_PERIPHERAL_PERF_CNT_EN_10_OFFSET);
    addr_hit[11] = (reg_addr == SNITCH_CLUSTER_PERIPHERAL_PERF_CNT_EN_11_OFFSET);
    addr_hit[12] = (reg_addr == SNITCH_CLUSTER_PERIPHERAL_PERF_CNT_EN_12_OFFSET);
    addr_hit[13] = (reg_addr == SNITCH_CLUSTER_PERIPHERAL_PERF_CNT_EN_13_OFFSET);
    addr_hit[14] = (reg_addr == SNITCH_CLUSTER_PERIPHERAL_PERF_CNT_EN_14_OFFSET);
    addr_hit[15] = (reg_addr == SNITCH_CLUSTER_PERIPHERAL_PERF_CNT_EN_15_OFFSET);
    addr_hit[16] = (reg_addr == SNITCH_CLUSTER_PERIPHERAL_PERF_CNT_SEL_0_OFFSET);
    addr_hit[17] = (reg_addr == SNITCH_CLUSTER_PERIPHERAL_PERF_CNT_SEL_1_OFFSET);
    addr_hit[18] = (reg_addr == SNITCH_CLUSTER_PERIPHERAL_PERF_CNT_SEL_2_OFFSET);
    addr_hit[19] = (reg_addr == SNITCH_CLUSTER_PERIPHERAL_PERF_CNT_SEL_3_OFFSET);
    addr_hit[20] = (reg_addr == SNITCH_CLUSTER_PERIPHERAL_PERF_CNT_SEL_4_OFFSET);
    addr_hit[21] = (reg_addr == SNITCH_CLUSTER_PERIPHERAL_PERF_CNT_SEL_5_OFFSET);
    addr_hit[22] = (reg_addr == SNITCH_CLUSTER_PERIPHERAL_PERF_CNT_SEL_6_OFFSET);
    addr_hit[23] = (reg_addr == SNITCH_CLUSTER_PERIPHERAL_PERF_CNT_SEL_7_OFFSET);
    addr_hit[24] = (reg_addr == SNITCH_CLUSTER_PERIPHERAL_PERF_CNT_SEL_8_OFFSET);
    addr_hit[25] = (reg_addr == SNITCH_CLUSTER_PERIPHERAL_PERF_CNT_SEL_9_OFFSET);
    addr_hit[26] = (reg_addr == SNITCH_CLUSTER_PERIPHERAL_PERF_CNT_SEL_10_OFFSET);
    addr_hit[27] = (reg_addr == SNITCH_CLUSTER_PERIPHERAL_PERF_CNT_SEL_11_OFFSET);
    addr_hit[28] = (reg_addr == SNITCH_CLUSTER_PERIPHERAL_PERF_CNT_SEL_12_OFFSET);
    addr_hit[29] = (reg_addr == SNITCH_CLUSTER_PERIPHERAL_PERF_CNT_SEL_13_OFFSET);
    addr_hit[30] = (reg_addr == SNITCH_CLUSTER_PERIPHERAL_PERF_CNT_SEL_14_OFFSET);
    addr_hit[31] = (reg_addr == SNITCH_CLUSTER_PERIPHERAL_PERF_CNT_SEL_15_OFFSET);
    addr_hit[32] = (reg_addr == SNITCH_CLUSTER_PERIPHERAL_PERF_CNT_0_OFFSET);
    addr_hit[33] = (reg_addr == SNITCH_CLUSTER_PERIPHERAL_PERF_CNT_1_OFFSET);
    addr_hit[34] = (reg_addr == SNITCH_CLUSTER_PERIPHERAL_PERF_CNT_2_OFFSET);
    addr_hit[35] = (reg_addr == SNITCH_CLUSTER_PERIPHERAL_PERF_CNT_3_OFFSET);
    addr_hit[36] = (reg_addr == SNITCH_CLUSTER_PERIPHERAL_PERF_CNT_4_OFFSET);
    addr_hit[37] = (reg_addr == SNITCH_CLUSTER_PERIPHERAL_PERF_CNT_5_OFFSET);
    addr_hit[38] = (reg_addr == SNITCH_CLUSTER_PERIPHERAL_PERF_CNT_6_OFFSET);
    addr_hit[39] = (reg_addr == SNITCH_CLUSTER_PERIPHERAL_PERF_CNT_7_OFFSET);
    addr_hit[40] = (reg_addr == SNITCH_CLUSTER_PERIPHERAL_PERF_CNT_8_OFFSET);
    addr_hit[41] = (reg_addr == SNITCH_CLUSTER_PERIPHERAL_PERF_CNT_9_OFFSET);
    addr_hit[42] = (reg_addr == SNITCH_CLUSTER_PERIPHERAL_PERF_CNT_10_OFFSET);
    addr_hit[43] = (reg_addr == SNITCH_CLUSTER_PERIPHERAL_PERF_CNT_11_OFFSET);
    addr_hit[44] = (reg_addr == SNITCH_CLUSTER_PERIPHERAL_PERF_CNT_12_OFFSET);
    addr_hit[45] = (reg_addr == SNITCH_CLUSTER_PERIPHERAL_PERF_CNT_13_OFFSET);
    addr_hit[46] = (reg_addr == SNITCH_CLUSTER_PERIPHERAL_PERF_CNT_14_OFFSET);
    addr_hit[47] = (reg_addr == SNITCH_CLUSTER_PERIPHERAL_PERF_CNT_15_OFFSET);
    addr_hit[48] = (reg_addr == SNITCH_CLUSTER_PERIPHERAL_CL_CLINT_SET_OFFSET);
    addr_hit[49] = (reg_addr == SNITCH_CLUSTER_PERIPHERAL_CL_CLINT_CLEAR_OFFSET);
    addr_hit[50] = (reg_addr == SNITCH_CLUSTER_PERIPHERAL_ICACHE_PREFETCH_ENABLE_OFFSET);
  end

  assign addrmiss = (reg_re || reg_we) ? ~|addr_hit : 1'b0 ;

  // Check sub-word write is permitted
  always_comb begin
    wr_err = (reg_we &
              ((addr_hit[ 0] & (|(SNITCH_CLUSTER_PERIPHERAL_PERMIT[ 0] & ~reg_be))) |
               (addr_hit[ 1] & (|(SNITCH_CLUSTER_PERIPHERAL_PERMIT[ 1] & ~reg_be))) |
               (addr_hit[ 2] & (|(SNITCH_CLUSTER_PERIPHERAL_PERMIT[ 2] & ~reg_be))) |
               (addr_hit[ 3] & (|(SNITCH_CLUSTER_PERIPHERAL_PERMIT[ 3] & ~reg_be))) |
               (addr_hit[ 4] & (|(SNITCH_CLUSTER_PERIPHERAL_PERMIT[ 4] & ~reg_be))) |
               (addr_hit[ 5] & (|(SNITCH_CLUSTER_PERIPHERAL_PERMIT[ 5] & ~reg_be))) |
               (addr_hit[ 6] & (|(SNITCH_CLUSTER_PERIPHERAL_PERMIT[ 6] & ~reg_be))) |
               (addr_hit[ 7] & (|(SNITCH_CLUSTER_PERIPHERAL_PERMIT[ 7] & ~reg_be))) |
               (addr_hit[ 8] & (|(SNITCH_CLUSTER_PERIPHERAL_PERMIT[ 8] & ~reg_be))) |
               (addr_hit[ 9] & (|(SNITCH_CLUSTER_PERIPHERAL_PERMIT[ 9] & ~reg_be))) |
               (addr_hit[10] & (|(SNITCH_CLUSTER_PERIPHERAL_PERMIT[10] & ~reg_be))) |
               (addr_hit[11] & (|(SNITCH_CLUSTER_PERIPHERAL_PERMIT[11] & ~reg_be))) |
               (addr_hit[12] & (|(SNITCH_CLUSTER_PERIPHERAL_PERMIT[12] & ~reg_be))) |
               (addr_hit[13] & (|(SNITCH_CLUSTER_PERIPHERAL_PERMIT[13] & ~reg_be))) |
               (addr_hit[14] & (|(SNITCH_CLUSTER_PERIPHERAL_PERMIT[14] & ~reg_be))) |
               (addr_hit[15] & (|(SNITCH_CLUSTER_PERIPHERAL_PERMIT[15] & ~reg_be))) |
               (addr_hit[16] & (|(SNITCH_CLUSTER_PERIPHERAL_PERMIT[16] & ~reg_be))) |
               (addr_hit[17] & (|(SNITCH_CLUSTER_PERIPHERAL_PERMIT[17] & ~reg_be))) |
               (addr_hit[18] & (|(SNITCH_CLUSTER_PERIPHERAL_PERMIT[18] & ~reg_be))) |
               (addr_hit[19] & (|(SNITCH_CLUSTER_PERIPHERAL_PERMIT[19] & ~reg_be))) |
               (addr_hit[20] & (|(SNITCH_CLUSTER_PERIPHERAL_PERMIT[20] & ~reg_be))) |
               (addr_hit[21] & (|(SNITCH_CLUSTER_PERIPHERAL_PERMIT[21] & ~reg_be))) |
               (addr_hit[22] & (|(SNITCH_CLUSTER_PERIPHERAL_PERMIT[22] & ~reg_be))) |
               (addr_hit[23] & (|(SNITCH_CLUSTER_PERIPHERAL_PERMIT[23] & ~reg_be))) |
               (addr_hit[24] & (|(SNITCH_CLUSTER_PERIPHERAL_PERMIT[24] & ~reg_be))) |
               (addr_hit[25] & (|(SNITCH_CLUSTER_PERIPHERAL_PERMIT[25] & ~reg_be))) |
               (addr_hit[26] & (|(SNITCH_CLUSTER_PERIPHERAL_PERMIT[26] & ~reg_be))) |
               (addr_hit[27] & (|(SNITCH_CLUSTER_PERIPHERAL_PERMIT[27] & ~reg_be))) |
               (addr_hit[28] & (|(SNITCH_CLUSTER_PERIPHERAL_PERMIT[28] & ~reg_be))) |
               (addr_hit[29] & (|(SNITCH_CLUSTER_PERIPHERAL_PERMIT[29] & ~reg_be))) |
               (addr_hit[30] & (|(SNITCH_CLUSTER_PERIPHERAL_PERMIT[30] & ~reg_be))) |
               (addr_hit[31] & (|(SNITCH_CLUSTER_PERIPHERAL_PERMIT[31] & ~reg_be))) |
               (addr_hit[32] & (|(SNITCH_CLUSTER_PERIPHERAL_PERMIT[32] & ~reg_be))) |
               (addr_hit[33] & (|(SNITCH_CLUSTER_PERIPHERAL_PERMIT[33] & ~reg_be))) |
               (addr_hit[34] & (|(SNITCH_CLUSTER_PERIPHERAL_PERMIT[34] & ~reg_be))) |
               (addr_hit[35] & (|(SNITCH_CLUSTER_PERIPHERAL_PERMIT[35] & ~reg_be))) |
               (addr_hit[36] & (|(SNITCH_CLUSTER_PERIPHERAL_PERMIT[36] & ~reg_be))) |
               (addr_hit[37] & (|(SNITCH_CLUSTER_PERIPHERAL_PERMIT[37] & ~reg_be))) |
               (addr_hit[38] & (|(SNITCH_CLUSTER_PERIPHERAL_PERMIT[38] & ~reg_be))) |
               (addr_hit[39] & (|(SNITCH_CLUSTER_PERIPHERAL_PERMIT[39] & ~reg_be))) |
               (addr_hit[40] & (|(SNITCH_CLUSTER_PERIPHERAL_PERMIT[40] & ~reg_be))) |
               (addr_hit[41] & (|(SNITCH_CLUSTER_PERIPHERAL_PERMIT[41] & ~reg_be))) |
               (addr_hit[42] & (|(SNITCH_CLUSTER_PERIPHERAL_PERMIT[42] & ~reg_be))) |
               (addr_hit[43] & (|(SNITCH_CLUSTER_PERIPHERAL_PERMIT[43] & ~reg_be))) |
               (addr_hit[44] & (|(SNITCH_CLUSTER_PERIPHERAL_PERMIT[44] & ~reg_be))) |
               (addr_hit[45] & (|(SNITCH_CLUSTER_PERIPHERAL_PERMIT[45] & ~reg_be))) |
               (addr_hit[46] & (|(SNITCH_CLUSTER_PERIPHERAL_PERMIT[46] & ~reg_be))) |
               (addr_hit[47] & (|(SNITCH_CLUSTER_PERIPHERAL_PERMIT[47] & ~reg_be))) |
               (addr_hit[48] & (|(SNITCH_CLUSTER_PERIPHERAL_PERMIT[48] & ~reg_be))) |
               (addr_hit[49] & (|(SNITCH_CLUSTER_PERIPHERAL_PERMIT[49] & ~reg_be))) |
               (addr_hit[50] & (|(SNITCH_CLUSTER_PERIPHERAL_PERMIT[50] & ~reg_be)))));
  end

  assign perf_cnt_en_0_we = addr_hit[0] & reg_we & !reg_error;
  assign perf_cnt_en_0_wd = reg_wdata[0];

  assign perf_cnt_en_1_we = addr_hit[1] & reg_we & !reg_error;
  assign perf_cnt_en_1_wd = reg_wdata[0];

  assign perf_cnt_en_2_we = addr_hit[2] & reg_we & !reg_error;
  assign perf_cnt_en_2_wd = reg_wdata[0];

  assign perf_cnt_en_3_we = addr_hit[3] & reg_we & !reg_error;
  assign perf_cnt_en_3_wd = reg_wdata[0];

  assign perf_cnt_en_4_we = addr_hit[4] & reg_we & !reg_error;
  assign perf_cnt_en_4_wd = reg_wdata[0];

  assign perf_cnt_en_5_we = addr_hit[5] & reg_we & !reg_error;
  assign perf_cnt_en_5_wd = reg_wdata[0];

  assign perf_cnt_en_6_we = addr_hit[6] & reg_we & !reg_error;
  assign perf_cnt_en_6_wd = reg_wdata[0];

  assign perf_cnt_en_7_we = addr_hit[7] & reg_we & !reg_error;
  assign perf_cnt_en_7_wd = reg_wdata[0];

  assign perf_cnt_en_8_we = addr_hit[8] & reg_we & !reg_error;
  assign perf_cnt_en_8_wd = reg_wdata[0];

  assign perf_cnt_en_9_we = addr_hit[9] & reg_we & !reg_error;
  assign perf_cnt_en_9_wd = reg_wdata[0];

  assign perf_cnt_en_10_we = addr_hit[10] & reg_we & !reg_error;
  assign perf_cnt_en_10_wd = reg_wdata[0];

  assign perf_cnt_en_11_we = addr_hit[11] & reg_we & !reg_error;
  assign perf_cnt_en_11_wd = reg_wdata[0];

  assign perf_cnt_en_12_we = addr_hit[12] & reg_we & !reg_error;
  assign perf_cnt_en_12_wd = reg_wdata[0];

  assign perf_cnt_en_13_we = addr_hit[13] & reg_we & !reg_error;
  assign perf_cnt_en_13_wd = reg_wdata[0];

  assign perf_cnt_en_14_we = addr_hit[14] & reg_we & !reg_error;
  assign perf_cnt_en_14_wd = reg_wdata[0];

  assign perf_cnt_en_15_we = addr_hit[15] & reg_we & !reg_error;
  assign perf_cnt_en_15_wd = reg_wdata[0];

  assign perf_cnt_sel_0_hart_0_we = addr_hit[16] & reg_we & !reg_error;
  assign perf_cnt_sel_0_hart_0_wd = reg_wdata[15:0];
  assign perf_cnt_sel_0_hart_0_re = addr_hit[16] & reg_re & !reg_error;

  assign perf_cnt_sel_0_metric_0_we = addr_hit[16] & reg_we & !reg_error;
  assign perf_cnt_sel_0_metric_0_wd = reg_wdata[31:16];
  assign perf_cnt_sel_0_metric_0_re = addr_hit[16] & reg_re & !reg_error;

  assign perf_cnt_sel_1_hart_1_we = addr_hit[17] & reg_we & !reg_error;
  assign perf_cnt_sel_1_hart_1_wd = reg_wdata[15:0];
  assign perf_cnt_sel_1_hart_1_re = addr_hit[17] & reg_re & !reg_error;

  assign perf_cnt_sel_1_metric_1_we = addr_hit[17] & reg_we & !reg_error;
  assign perf_cnt_sel_1_metric_1_wd = reg_wdata[31:16];
  assign perf_cnt_sel_1_metric_1_re = addr_hit[17] & reg_re & !reg_error;

  assign perf_cnt_sel_2_hart_2_we = addr_hit[18] & reg_we & !reg_error;
  assign perf_cnt_sel_2_hart_2_wd = reg_wdata[15:0];
  assign perf_cnt_sel_2_hart_2_re = addr_hit[18] & reg_re & !reg_error;

  assign perf_cnt_sel_2_metric_2_we = addr_hit[18] & reg_we & !reg_error;
  assign perf_cnt_sel_2_metric_2_wd = reg_wdata[31:16];
  assign perf_cnt_sel_2_metric_2_re = addr_hit[18] & reg_re & !reg_error;

  assign perf_cnt_sel_3_hart_3_we = addr_hit[19] & reg_we & !reg_error;
  assign perf_cnt_sel_3_hart_3_wd = reg_wdata[15:0];
  assign perf_cnt_sel_3_hart_3_re = addr_hit[19] & reg_re & !reg_error;

  assign perf_cnt_sel_3_metric_3_we = addr_hit[19] & reg_we & !reg_error;
  assign perf_cnt_sel_3_metric_3_wd = reg_wdata[31:16];
  assign perf_cnt_sel_3_metric_3_re = addr_hit[19] & reg_re & !reg_error;

  assign perf_cnt_sel_4_hart_4_we = addr_hit[20] & reg_we & !reg_error;
  assign perf_cnt_sel_4_hart_4_wd = reg_wdata[15:0];
  assign perf_cnt_sel_4_hart_4_re = addr_hit[20] & reg_re & !reg_error;

  assign perf_cnt_sel_4_metric_4_we = addr_hit[20] & reg_we & !reg_error;
  assign perf_cnt_sel_4_metric_4_wd = reg_wdata[31:16];
  assign perf_cnt_sel_4_metric_4_re = addr_hit[20] & reg_re & !reg_error;

  assign perf_cnt_sel_5_hart_5_we = addr_hit[21] & reg_we & !reg_error;
  assign perf_cnt_sel_5_hart_5_wd = reg_wdata[15:0];
  assign perf_cnt_sel_5_hart_5_re = addr_hit[21] & reg_re & !reg_error;

  assign perf_cnt_sel_5_metric_5_we = addr_hit[21] & reg_we & !reg_error;
  assign perf_cnt_sel_5_metric_5_wd = reg_wdata[31:16];
  assign perf_cnt_sel_5_metric_5_re = addr_hit[21] & reg_re & !reg_error;

  assign perf_cnt_sel_6_hart_6_we = addr_hit[22] & reg_we & !reg_error;
  assign perf_cnt_sel_6_hart_6_wd = reg_wdata[15:0];
  assign perf_cnt_sel_6_hart_6_re = addr_hit[22] & reg_re & !reg_error;

  assign perf_cnt_sel_6_metric_6_we = addr_hit[22] & reg_we & !reg_error;
  assign perf_cnt_sel_6_metric_6_wd = reg_wdata[31:16];
  assign perf_cnt_sel_6_metric_6_re = addr_hit[22] & reg_re & !reg_error;

  assign perf_cnt_sel_7_hart_7_we = addr_hit[23] & reg_we & !reg_error;
  assign perf_cnt_sel_7_hart_7_wd = reg_wdata[15:0];
  assign perf_cnt_sel_7_hart_7_re = addr_hit[23] & reg_re & !reg_error;

  assign perf_cnt_sel_7_metric_7_we = addr_hit[23] & reg_we & !reg_error;
  assign perf_cnt_sel_7_metric_7_wd = reg_wdata[31:16];
  assign perf_cnt_sel_7_metric_7_re = addr_hit[23] & reg_re & !reg_error;

  assign perf_cnt_sel_8_hart_8_we = addr_hit[24] & reg_we & !reg_error;
  assign perf_cnt_sel_8_hart_8_wd = reg_wdata[15:0];
  assign perf_cnt_sel_8_hart_8_re = addr_hit[24] & reg_re & !reg_error;

  assign perf_cnt_sel_8_metric_8_we = addr_hit[24] & reg_we & !reg_error;
  assign perf_cnt_sel_8_metric_8_wd = reg_wdata[31:16];
  assign perf_cnt_sel_8_metric_8_re = addr_hit[24] & reg_re & !reg_error;

  assign perf_cnt_sel_9_hart_9_we = addr_hit[25] & reg_we & !reg_error;
  assign perf_cnt_sel_9_hart_9_wd = reg_wdata[15:0];
  assign perf_cnt_sel_9_hart_9_re = addr_hit[25] & reg_re & !reg_error;

  assign perf_cnt_sel_9_metric_9_we = addr_hit[25] & reg_we & !reg_error;
  assign perf_cnt_sel_9_metric_9_wd = reg_wdata[31:16];
  assign perf_cnt_sel_9_metric_9_re = addr_hit[25] & reg_re & !reg_error;

  assign perf_cnt_sel_10_hart_10_we = addr_hit[26] & reg_we & !reg_error;
  assign perf_cnt_sel_10_hart_10_wd = reg_wdata[15:0];
  assign perf_cnt_sel_10_hart_10_re = addr_hit[26] & reg_re & !reg_error;

  assign perf_cnt_sel_10_metric_10_we = addr_hit[26] & reg_we & !reg_error;
  assign perf_cnt_sel_10_metric_10_wd = reg_wdata[31:16];
  assign perf_cnt_sel_10_metric_10_re = addr_hit[26] & reg_re & !reg_error;

  assign perf_cnt_sel_11_hart_11_we = addr_hit[27] & reg_we & !reg_error;
  assign perf_cnt_sel_11_hart_11_wd = reg_wdata[15:0];
  assign perf_cnt_sel_11_hart_11_re = addr_hit[27] & reg_re & !reg_error;

  assign perf_cnt_sel_11_metric_11_we = addr_hit[27] & reg_we & !reg_error;
  assign perf_cnt_sel_11_metric_11_wd = reg_wdata[31:16];
  assign perf_cnt_sel_11_metric_11_re = addr_hit[27] & reg_re & !reg_error;

  assign perf_cnt_sel_12_hart_12_we = addr_hit[28] & reg_we & !reg_error;
  assign perf_cnt_sel_12_hart_12_wd = reg_wdata[15:0];
  assign perf_cnt_sel_12_hart_12_re = addr_hit[28] & reg_re & !reg_error;

  assign perf_cnt_sel_12_metric_12_we = addr_hit[28] & reg_we & !reg_error;
  assign perf_cnt_sel_12_metric_12_wd = reg_wdata[31:16];
  assign perf_cnt_sel_12_metric_12_re = addr_hit[28] & reg_re & !reg_error;

  assign perf_cnt_sel_13_hart_13_we = addr_hit[29] & reg_we & !reg_error;
  assign perf_cnt_sel_13_hart_13_wd = reg_wdata[15:0];
  assign perf_cnt_sel_13_hart_13_re = addr_hit[29] & reg_re & !reg_error;

  assign perf_cnt_sel_13_metric_13_we = addr_hit[29] & reg_we & !reg_error;
  assign perf_cnt_sel_13_metric_13_wd = reg_wdata[31:16];
  assign perf_cnt_sel_13_metric_13_re = addr_hit[29] & reg_re & !reg_error;

  assign perf_cnt_sel_14_hart_14_we = addr_hit[30] & reg_we & !reg_error;
  assign perf_cnt_sel_14_hart_14_wd = reg_wdata[15:0];
  assign perf_cnt_sel_14_hart_14_re = addr_hit[30] & reg_re & !reg_error;

  assign perf_cnt_sel_14_metric_14_we = addr_hit[30] & reg_we & !reg_error;
  assign perf_cnt_sel_14_metric_14_wd = reg_wdata[31:16];
  assign perf_cnt_sel_14_metric_14_re = addr_hit[30] & reg_re & !reg_error;

  assign perf_cnt_sel_15_hart_15_we = addr_hit[31] & reg_we & !reg_error;
  assign perf_cnt_sel_15_hart_15_wd = reg_wdata[15:0];
  assign perf_cnt_sel_15_hart_15_re = addr_hit[31] & reg_re & !reg_error;

  assign perf_cnt_sel_15_metric_15_we = addr_hit[31] & reg_we & !reg_error;
  assign perf_cnt_sel_15_metric_15_wd = reg_wdata[31:16];
  assign perf_cnt_sel_15_metric_15_re = addr_hit[31] & reg_re & !reg_error;

  assign perf_cnt_0_we = addr_hit[32] & reg_we & !reg_error;
  assign perf_cnt_0_wd = reg_wdata[47:0];
  assign perf_cnt_0_re = addr_hit[32] & reg_re & !reg_error;

  assign perf_cnt_1_we = addr_hit[33] & reg_we & !reg_error;
  assign perf_cnt_1_wd = reg_wdata[47:0];
  assign perf_cnt_1_re = addr_hit[33] & reg_re & !reg_error;

  assign perf_cnt_2_we = addr_hit[34] & reg_we & !reg_error;
  assign perf_cnt_2_wd = reg_wdata[47:0];
  assign perf_cnt_2_re = addr_hit[34] & reg_re & !reg_error;

  assign perf_cnt_3_we = addr_hit[35] & reg_we & !reg_error;
  assign perf_cnt_3_wd = reg_wdata[47:0];
  assign perf_cnt_3_re = addr_hit[35] & reg_re & !reg_error;

  assign perf_cnt_4_we = addr_hit[36] & reg_we & !reg_error;
  assign perf_cnt_4_wd = reg_wdata[47:0];
  assign perf_cnt_4_re = addr_hit[36] & reg_re & !reg_error;

  assign perf_cnt_5_we = addr_hit[37] & reg_we & !reg_error;
  assign perf_cnt_5_wd = reg_wdata[47:0];
  assign perf_cnt_5_re = addr_hit[37] & reg_re & !reg_error;

  assign perf_cnt_6_we = addr_hit[38] & reg_we & !reg_error;
  assign perf_cnt_6_wd = reg_wdata[47:0];
  assign perf_cnt_6_re = addr_hit[38] & reg_re & !reg_error;

  assign perf_cnt_7_we = addr_hit[39] & reg_we & !reg_error;
  assign perf_cnt_7_wd = reg_wdata[47:0];
  assign perf_cnt_7_re = addr_hit[39] & reg_re & !reg_error;

  assign perf_cnt_8_we = addr_hit[40] & reg_we & !reg_error;
  assign perf_cnt_8_wd = reg_wdata[47:0];
  assign perf_cnt_8_re = addr_hit[40] & reg_re & !reg_error;

  assign perf_cnt_9_we = addr_hit[41] & reg_we & !reg_error;
  assign perf_cnt_9_wd = reg_wdata[47:0];
  assign perf_cnt_9_re = addr_hit[41] & reg_re & !reg_error;

  assign perf_cnt_10_we = addr_hit[42] & reg_we & !reg_error;
  assign perf_cnt_10_wd = reg_wdata[47:0];
  assign perf_cnt_10_re = addr_hit[42] & reg_re & !reg_error;

  assign perf_cnt_11_we = addr_hit[43] & reg_we & !reg_error;
  assign perf_cnt_11_wd = reg_wdata[47:0];
  assign perf_cnt_11_re = addr_hit[43] & reg_re & !reg_error;

  assign perf_cnt_12_we = addr_hit[44] & reg_we & !reg_error;
  assign perf_cnt_12_wd = reg_wdata[47:0];
  assign perf_cnt_12_re = addr_hit[44] & reg_re & !reg_error;

  assign perf_cnt_13_we = addr_hit[45] & reg_we & !reg_error;
  assign perf_cnt_13_wd = reg_wdata[47:0];
  assign perf_cnt_13_re = addr_hit[45] & reg_re & !reg_error;

  assign perf_cnt_14_we = addr_hit[46] & reg_we & !reg_error;
  assign perf_cnt_14_wd = reg_wdata[47:0];
  assign perf_cnt_14_re = addr_hit[46] & reg_re & !reg_error;

  assign perf_cnt_15_we = addr_hit[47] & reg_we & !reg_error;
  assign perf_cnt_15_wd = reg_wdata[47:0];
  assign perf_cnt_15_re = addr_hit[47] & reg_re & !reg_error;

  assign cl_clint_set_we = addr_hit[48] & reg_we & !reg_error;
  assign cl_clint_set_wd = reg_wdata[31:0];

  assign cl_clint_clear_we = addr_hit[49] & reg_we & !reg_error;
  assign cl_clint_clear_wd = reg_wdata[31:0];

  assign icache_prefetch_enable_we = addr_hit[50] & reg_we & !reg_error;
  assign icache_prefetch_enable_wd = reg_wdata[0];

  // Read data return
  always_comb begin
    reg_rdata_next = '0;
    unique case (1'b1)
      addr_hit[0]: begin
        reg_rdata_next[0] = perf_cnt_en_0_qs;
      end

      addr_hit[1]: begin
        reg_rdata_next[0] = perf_cnt_en_1_qs;
      end

      addr_hit[2]: begin
        reg_rdata_next[0] = perf_cnt_en_2_qs;
      end

      addr_hit[3]: begin
        reg_rdata_next[0] = perf_cnt_en_3_qs;
      end

      addr_hit[4]: begin
        reg_rdata_next[0] = perf_cnt_en_4_qs;
      end

      addr_hit[5]: begin
        reg_rdata_next[0] = perf_cnt_en_5_qs;
      end

      addr_hit[6]: begin
        reg_rdata_next[0] = perf_cnt_en_6_qs;
      end

      addr_hit[7]: begin
        reg_rdata_next[0] = perf_cnt_en_7_qs;
      end

      addr_hit[8]: begin
        reg_rdata_next[0] = perf_cnt_en_8_qs;
      end

      addr_hit[9]: begin
        reg_rdata_next[0] = perf_cnt_en_9_qs;
      end

      addr_hit[10]: begin
        reg_rdata_next[0] = perf_cnt_en_10_qs;
      end

      addr_hit[11]: begin
        reg_rdata_next[0] = perf_cnt_en_11_qs;
      end

      addr_hit[12]: begin
        reg_rdata_next[0] = perf_cnt_en_12_qs;
      end

      addr_hit[13]: begin
        reg_rdata_next[0] = perf_cnt_en_13_qs;
      end

      addr_hit[14]: begin
        reg_rdata_next[0] = perf_cnt_en_14_qs;
      end

      addr_hit[15]: begin
        reg_rdata_next[0] = perf_cnt_en_15_qs;
      end

      addr_hit[16]: begin
        reg_rdata_next[15:0] = perf_cnt_sel_0_hart_0_qs;
        reg_rdata_next[31:16] = perf_cnt_sel_0_metric_0_qs;
      end

      addr_hit[17]: begin
        reg_rdata_next[15:0] = perf_cnt_sel_1_hart_1_qs;
        reg_rdata_next[31:16] = perf_cnt_sel_1_metric_1_qs;
      end

      addr_hit[18]: begin
        reg_rdata_next[15:0] = perf_cnt_sel_2_hart_2_qs;
        reg_rdata_next[31:16] = perf_cnt_sel_2_metric_2_qs;
      end

      addr_hit[19]: begin
        reg_rdata_next[15:0] = perf_cnt_sel_3_hart_3_qs;
        reg_rdata_next[31:16] = perf_cnt_sel_3_metric_3_qs;
      end

      addr_hit[20]: begin
        reg_rdata_next[15:0] = perf_cnt_sel_4_hart_4_qs;
        reg_rdata_next[31:16] = perf_cnt_sel_4_metric_4_qs;
      end

      addr_hit[21]: begin
        reg_rdata_next[15:0] = perf_cnt_sel_5_hart_5_qs;
        reg_rdata_next[31:16] = perf_cnt_sel_5_metric_5_qs;
      end

      addr_hit[22]: begin
        reg_rdata_next[15:0] = perf_cnt_sel_6_hart_6_qs;
        reg_rdata_next[31:16] = perf_cnt_sel_6_metric_6_qs;
      end

      addr_hit[23]: begin
        reg_rdata_next[15:0] = perf_cnt_sel_7_hart_7_qs;
        reg_rdata_next[31:16] = perf_cnt_sel_7_metric_7_qs;
      end

      addr_hit[24]: begin
        reg_rdata_next[15:0] = perf_cnt_sel_8_hart_8_qs;
        reg_rdata_next[31:16] = perf_cnt_sel_8_metric_8_qs;
      end

      addr_hit[25]: begin
        reg_rdata_next[15:0] = perf_cnt_sel_9_hart_9_qs;
        reg_rdata_next[31:16] = perf_cnt_sel_9_metric_9_qs;
      end

      addr_hit[26]: begin
        reg_rdata_next[15:0] = perf_cnt_sel_10_hart_10_qs;
        reg_rdata_next[31:16] = perf_cnt_sel_10_metric_10_qs;
      end

      addr_hit[27]: begin
        reg_rdata_next[15:0] = perf_cnt_sel_11_hart_11_qs;
        reg_rdata_next[31:16] = perf_cnt_sel_11_metric_11_qs;
      end

      addr_hit[28]: begin
        reg_rdata_next[15:0] = perf_cnt_sel_12_hart_12_qs;
        reg_rdata_next[31:16] = perf_cnt_sel_12_metric_12_qs;
      end

      addr_hit[29]: begin
        reg_rdata_next[15:0] = perf_cnt_sel_13_hart_13_qs;
        reg_rdata_next[31:16] = perf_cnt_sel_13_metric_13_qs;
      end

      addr_hit[30]: begin
        reg_rdata_next[15:0] = perf_cnt_sel_14_hart_14_qs;
        reg_rdata_next[31:16] = perf_cnt_sel_14_metric_14_qs;
      end

      addr_hit[31]: begin
        reg_rdata_next[15:0] = perf_cnt_sel_15_hart_15_qs;
        reg_rdata_next[31:16] = perf_cnt_sel_15_metric_15_qs;
      end

      addr_hit[32]: begin
        reg_rdata_next[47:0] = perf_cnt_0_qs;
      end

      addr_hit[33]: begin
        reg_rdata_next[47:0] = perf_cnt_1_qs;
      end

      addr_hit[34]: begin
        reg_rdata_next[47:0] = perf_cnt_2_qs;
      end

      addr_hit[35]: begin
        reg_rdata_next[47:0] = perf_cnt_3_qs;
      end

      addr_hit[36]: begin
        reg_rdata_next[47:0] = perf_cnt_4_qs;
      end

      addr_hit[37]: begin
        reg_rdata_next[47:0] = perf_cnt_5_qs;
      end

      addr_hit[38]: begin
        reg_rdata_next[47:0] = perf_cnt_6_qs;
      end

      addr_hit[39]: begin
        reg_rdata_next[47:0] = perf_cnt_7_qs;
      end

      addr_hit[40]: begin
        reg_rdata_next[47:0] = perf_cnt_8_qs;
      end

      addr_hit[41]: begin
        reg_rdata_next[47:0] = perf_cnt_9_qs;
      end

      addr_hit[42]: begin
        reg_rdata_next[47:0] = perf_cnt_10_qs;
      end

      addr_hit[43]: begin
        reg_rdata_next[47:0] = perf_cnt_11_qs;
      end

      addr_hit[44]: begin
        reg_rdata_next[47:0] = perf_cnt_12_qs;
      end

      addr_hit[45]: begin
        reg_rdata_next[47:0] = perf_cnt_13_qs;
      end

      addr_hit[46]: begin
        reg_rdata_next[47:0] = perf_cnt_14_qs;
      end

      addr_hit[47]: begin
        reg_rdata_next[47:0] = perf_cnt_15_qs;
      end

      addr_hit[48]: begin
        reg_rdata_next[31:0] = '0;
      end

      addr_hit[49]: begin
        reg_rdata_next[31:0] = '0;
      end

      addr_hit[50]: begin
        reg_rdata_next[0] = '0;
      end

      default: begin
        reg_rdata_next = '1;
      end
    endcase
  end

  // Unused signal tieoff

  // wdata / byte enable are not always fully used
  // add a blanket unused statement to handle lint waivers
  logic unused_wdata;
  logic unused_be;
  assign unused_wdata = ^reg_wdata;
  assign unused_be = ^reg_be;

  // Assertions for Register Interface
  `ASSERT(en2addrHit, (reg_we || reg_re) |-> $onehot0(addr_hit))

endmodule

module snitch_cluster_peripheral_reg_top_intf
#(
  parameter int AW = 9,
  localparam int DW = 64
) (
  input logic clk_i,
  input logic rst_ni,
  REG_BUS.in  regbus_slave,
  // To HW
  output snitch_cluster_peripheral_reg_pkg::snitch_cluster_peripheral_reg2hw_t reg2hw, // Write
  input  snitch_cluster_peripheral_reg_pkg::snitch_cluster_peripheral_hw2reg_t hw2reg, // Read
  // Config
  input devmode_i // If 1, explicit error return for unmapped register access
);
 localparam int unsigned STRB_WIDTH = DW/8;

`include "register_interface/typedef.svh"
`include "register_interface/assign.svh"

  // Define structs for reg_bus
  typedef logic [AW-1:0] addr_t;
  typedef logic [DW-1:0] data_t;
  typedef logic [STRB_WIDTH-1:0] strb_t;
  `REG_BUS_TYPEDEF_ALL(reg_bus, addr_t, data_t, strb_t)

  reg_bus_req_t s_reg_req;
  reg_bus_rsp_t s_reg_rsp;
  
  // Assign SV interface to structs
  `REG_BUS_ASSIGN_TO_REQ(s_reg_req, regbus_slave)
  `REG_BUS_ASSIGN_FROM_RSP(regbus_slave, s_reg_rsp)

  

  snitch_cluster_peripheral_reg_top #(
    .reg_req_t(reg_bus_req_t),
    .reg_rsp_t(reg_bus_rsp_t),
    .AW(AW)
  ) i_regs (
    .clk_i,
    .rst_ni,
    .reg_req_i(s_reg_req),
    .reg_rsp_o(s_reg_rsp),
    .reg2hw, // Write
    .hw2reg, // Read
    .devmode_i
  );
  
endmodule


