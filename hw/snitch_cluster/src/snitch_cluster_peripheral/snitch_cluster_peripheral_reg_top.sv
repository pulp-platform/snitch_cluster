// Copyright lowRISC contributors.
// Licensed under the Apache License, Version 2.0, see LICENSE for details.
// SPDX-License-Identifier: Apache-2.0
//
// Register Top module auto-generated by `reggen`


`include "common_cells/assertions.svh"

module snitch_cluster_peripheral_reg_top #(
  parameter type reg_req_t = logic,
  parameter type reg_rsp_t = logic,
  parameter int AW = 10
) (
  input logic clk_i,
  input logic rst_ni,
  input  reg_req_t reg_req_i,
  output reg_rsp_t reg_rsp_o,
  // To HW
  output snitch_cluster_peripheral_reg_pkg::snitch_cluster_peripheral_reg2hw_t reg2hw, // Write
  input  snitch_cluster_peripheral_reg_pkg::snitch_cluster_peripheral_hw2reg_t hw2reg, // Read


  // Config
  input devmode_i // If 1, explicit error return for unmapped register access
);

  import snitch_cluster_peripheral_reg_pkg::* ;

  localparam int DW = 64;
  localparam int DBW = DW/8;                    // Byte Width

  // register signals
  logic           reg_we;
  logic           reg_re;
  logic [BlockAw-1:0]  reg_addr;
  logic [DW-1:0]  reg_wdata;
  logic [DBW-1:0] reg_be;
  logic [DW-1:0]  reg_rdata;
  logic           reg_error;

  logic          addrmiss, wr_err;

  logic [DW-1:0] reg_rdata_next;

  // Below register interface can be changed
  reg_req_t  reg_intf_req;
  reg_rsp_t  reg_intf_rsp;


  assign reg_intf_req = reg_req_i;
  assign reg_rsp_o = reg_intf_rsp;


  assign reg_we = reg_intf_req.valid & reg_intf_req.write;
  assign reg_re = reg_intf_req.valid & ~reg_intf_req.write;
  assign reg_addr = reg_intf_req.addr[BlockAw-1:0];
  assign reg_wdata = reg_intf_req.wdata;
  assign reg_be = reg_intf_req.wstrb;
  assign reg_intf_rsp.rdata = reg_rdata;
  assign reg_intf_rsp.error = reg_error;
  assign reg_intf_rsp.ready = 1'b1;

  assign reg_rdata = reg_rdata_next ;
  assign reg_error = (devmode_i & addrmiss) | wr_err;


  // Define SW related signals
  // Format: <reg>_<field>_{wd|we|qs}
  //        or <reg>_{wd|we|qs} if field == 1 or 0
  logic perf_counter_enable_0_qs;
  logic perf_counter_enable_0_wd;
  logic perf_counter_enable_0_we;
  logic perf_counter_enable_1_qs;
  logic perf_counter_enable_1_wd;
  logic perf_counter_enable_1_we;
  logic perf_counter_enable_2_qs;
  logic perf_counter_enable_2_wd;
  logic perf_counter_enable_2_we;
  logic perf_counter_enable_3_qs;
  logic perf_counter_enable_3_wd;
  logic perf_counter_enable_3_we;
  logic perf_counter_enable_4_qs;
  logic perf_counter_enable_4_wd;
  logic perf_counter_enable_4_we;
  logic perf_counter_enable_5_qs;
  logic perf_counter_enable_5_wd;
  logic perf_counter_enable_5_we;
  logic perf_counter_enable_6_qs;
  logic perf_counter_enable_6_wd;
  logic perf_counter_enable_6_we;
  logic perf_counter_enable_7_qs;
  logic perf_counter_enable_7_wd;
  logic perf_counter_enable_7_we;
  logic perf_counter_enable_8_qs;
  logic perf_counter_enable_8_wd;
  logic perf_counter_enable_8_we;
  logic perf_counter_enable_9_qs;
  logic perf_counter_enable_9_wd;
  logic perf_counter_enable_9_we;
  logic perf_counter_enable_10_qs;
  logic perf_counter_enable_10_wd;
  logic perf_counter_enable_10_we;
  logic perf_counter_enable_11_qs;
  logic perf_counter_enable_11_wd;
  logic perf_counter_enable_11_we;
  logic perf_counter_enable_12_qs;
  logic perf_counter_enable_12_wd;
  logic perf_counter_enable_12_we;
  logic perf_counter_enable_13_qs;
  logic perf_counter_enable_13_wd;
  logic perf_counter_enable_13_we;
  logic perf_counter_enable_14_qs;
  logic perf_counter_enable_14_wd;
  logic perf_counter_enable_14_we;
  logic perf_counter_enable_15_qs;
  logic perf_counter_enable_15_wd;
  logic perf_counter_enable_15_we;
  logic [9:0] perf_counter_select_0_qs;
  logic [9:0] perf_counter_select_0_wd;
  logic perf_counter_select_0_we;
  logic perf_counter_select_0_re;
  logic [9:0] perf_counter_select_1_qs;
  logic [9:0] perf_counter_select_1_wd;
  logic perf_counter_select_1_we;
  logic perf_counter_select_1_re;
  logic [9:0] perf_counter_select_2_qs;
  logic [9:0] perf_counter_select_2_wd;
  logic perf_counter_select_2_we;
  logic perf_counter_select_2_re;
  logic [9:0] perf_counter_select_3_qs;
  logic [9:0] perf_counter_select_3_wd;
  logic perf_counter_select_3_we;
  logic perf_counter_select_3_re;
  logic [9:0] perf_counter_select_4_qs;
  logic [9:0] perf_counter_select_4_wd;
  logic perf_counter_select_4_we;
  logic perf_counter_select_4_re;
  logic [9:0] perf_counter_select_5_qs;
  logic [9:0] perf_counter_select_5_wd;
  logic perf_counter_select_5_we;
  logic perf_counter_select_5_re;
  logic [9:0] perf_counter_select_6_qs;
  logic [9:0] perf_counter_select_6_wd;
  logic perf_counter_select_6_we;
  logic perf_counter_select_6_re;
  logic [9:0] perf_counter_select_7_qs;
  logic [9:0] perf_counter_select_7_wd;
  logic perf_counter_select_7_we;
  logic perf_counter_select_7_re;
  logic [9:0] perf_counter_select_8_qs;
  logic [9:0] perf_counter_select_8_wd;
  logic perf_counter_select_8_we;
  logic perf_counter_select_8_re;
  logic [9:0] perf_counter_select_9_qs;
  logic [9:0] perf_counter_select_9_wd;
  logic perf_counter_select_9_we;
  logic perf_counter_select_9_re;
  logic [9:0] perf_counter_select_10_qs;
  logic [9:0] perf_counter_select_10_wd;
  logic perf_counter_select_10_we;
  logic perf_counter_select_10_re;
  logic [9:0] perf_counter_select_11_qs;
  logic [9:0] perf_counter_select_11_wd;
  logic perf_counter_select_11_we;
  logic perf_counter_select_11_re;
  logic [9:0] perf_counter_select_12_qs;
  logic [9:0] perf_counter_select_12_wd;
  logic perf_counter_select_12_we;
  logic perf_counter_select_12_re;
  logic [9:0] perf_counter_select_13_qs;
  logic [9:0] perf_counter_select_13_wd;
  logic perf_counter_select_13_we;
  logic perf_counter_select_13_re;
  logic [9:0] perf_counter_select_14_qs;
  logic [9:0] perf_counter_select_14_wd;
  logic perf_counter_select_14_we;
  logic perf_counter_select_14_re;
  logic [9:0] perf_counter_select_15_qs;
  logic [9:0] perf_counter_select_15_wd;
  logic perf_counter_select_15_we;
  logic perf_counter_select_15_re;
  logic [9:0] perf_counter_hart_select_0_qs;
  logic [9:0] perf_counter_hart_select_0_wd;
  logic perf_counter_hart_select_0_we;
  logic [9:0] perf_counter_hart_select_1_qs;
  logic [9:0] perf_counter_hart_select_1_wd;
  logic perf_counter_hart_select_1_we;
  logic [9:0] perf_counter_hart_select_2_qs;
  logic [9:0] perf_counter_hart_select_2_wd;
  logic perf_counter_hart_select_2_we;
  logic [9:0] perf_counter_hart_select_3_qs;
  logic [9:0] perf_counter_hart_select_3_wd;
  logic perf_counter_hart_select_3_we;
  logic [9:0] perf_counter_hart_select_4_qs;
  logic [9:0] perf_counter_hart_select_4_wd;
  logic perf_counter_hart_select_4_we;
  logic [9:0] perf_counter_hart_select_5_qs;
  logic [9:0] perf_counter_hart_select_5_wd;
  logic perf_counter_hart_select_5_we;
  logic [9:0] perf_counter_hart_select_6_qs;
  logic [9:0] perf_counter_hart_select_6_wd;
  logic perf_counter_hart_select_6_we;
  logic [9:0] perf_counter_hart_select_7_qs;
  logic [9:0] perf_counter_hart_select_7_wd;
  logic perf_counter_hart_select_7_we;
  logic [9:0] perf_counter_hart_select_8_qs;
  logic [9:0] perf_counter_hart_select_8_wd;
  logic perf_counter_hart_select_8_we;
  logic [9:0] perf_counter_hart_select_9_qs;
  logic [9:0] perf_counter_hart_select_9_wd;
  logic perf_counter_hart_select_9_we;
  logic [9:0] perf_counter_hart_select_10_qs;
  logic [9:0] perf_counter_hart_select_10_wd;
  logic perf_counter_hart_select_10_we;
  logic [9:0] perf_counter_hart_select_11_qs;
  logic [9:0] perf_counter_hart_select_11_wd;
  logic perf_counter_hart_select_11_we;
  logic [9:0] perf_counter_hart_select_12_qs;
  logic [9:0] perf_counter_hart_select_12_wd;
  logic perf_counter_hart_select_12_we;
  logic [9:0] perf_counter_hart_select_13_qs;
  logic [9:0] perf_counter_hart_select_13_wd;
  logic perf_counter_hart_select_13_we;
  logic [9:0] perf_counter_hart_select_14_qs;
  logic [9:0] perf_counter_hart_select_14_wd;
  logic perf_counter_hart_select_14_we;
  logic [9:0] perf_counter_hart_select_15_qs;
  logic [9:0] perf_counter_hart_select_15_wd;
  logic perf_counter_hart_select_15_we;
  logic [47:0] perf_counter_0_qs;
  logic [47:0] perf_counter_0_wd;
  logic perf_counter_0_we;
  logic perf_counter_0_re;
  logic [47:0] perf_counter_1_qs;
  logic [47:0] perf_counter_1_wd;
  logic perf_counter_1_we;
  logic perf_counter_1_re;
  logic [47:0] perf_counter_2_qs;
  logic [47:0] perf_counter_2_wd;
  logic perf_counter_2_we;
  logic perf_counter_2_re;
  logic [47:0] perf_counter_3_qs;
  logic [47:0] perf_counter_3_wd;
  logic perf_counter_3_we;
  logic perf_counter_3_re;
  logic [47:0] perf_counter_4_qs;
  logic [47:0] perf_counter_4_wd;
  logic perf_counter_4_we;
  logic perf_counter_4_re;
  logic [47:0] perf_counter_5_qs;
  logic [47:0] perf_counter_5_wd;
  logic perf_counter_5_we;
  logic perf_counter_5_re;
  logic [47:0] perf_counter_6_qs;
  logic [47:0] perf_counter_6_wd;
  logic perf_counter_6_we;
  logic perf_counter_6_re;
  logic [47:0] perf_counter_7_qs;
  logic [47:0] perf_counter_7_wd;
  logic perf_counter_7_we;
  logic perf_counter_7_re;
  logic [47:0] perf_counter_8_qs;
  logic [47:0] perf_counter_8_wd;
  logic perf_counter_8_we;
  logic perf_counter_8_re;
  logic [47:0] perf_counter_9_qs;
  logic [47:0] perf_counter_9_wd;
  logic perf_counter_9_we;
  logic perf_counter_9_re;
  logic [47:0] perf_counter_10_qs;
  logic [47:0] perf_counter_10_wd;
  logic perf_counter_10_we;
  logic perf_counter_10_re;
  logic [47:0] perf_counter_11_qs;
  logic [47:0] perf_counter_11_wd;
  logic perf_counter_11_we;
  logic perf_counter_11_re;
  logic [47:0] perf_counter_12_qs;
  logic [47:0] perf_counter_12_wd;
  logic perf_counter_12_we;
  logic perf_counter_12_re;
  logic [47:0] perf_counter_13_qs;
  logic [47:0] perf_counter_13_wd;
  logic perf_counter_13_we;
  logic perf_counter_13_re;
  logic [47:0] perf_counter_14_qs;
  logic [47:0] perf_counter_14_wd;
  logic perf_counter_14_we;
  logic perf_counter_14_re;
  logic [47:0] perf_counter_15_qs;
  logic [47:0] perf_counter_15_wd;
  logic perf_counter_15_we;
  logic perf_counter_15_re;
  logic [31:0] cl_clint_set_wd;
  logic cl_clint_set_we;
  logic [31:0] cl_clint_clear_wd;
  logic cl_clint_clear_we;
  logic [31:0] hw_barrier_qs;
  logic hw_barrier_re;
  logic icache_prefetch_enable_wd;
  logic icache_prefetch_enable_we;

  // Register instances

  // Subregister 0 of Multireg perf_counter_enable
  // R[perf_counter_enable_0]: V(False)

  prim_subreg #(
    .DW      (1),
    .SWACCESS("RW"),
    .RESVAL  (1'h0)
  ) u_perf_counter_enable_0 (
    .clk_i   (clk_i    ),
    .rst_ni  (rst_ni  ),

    // from register interface
    .we     (perf_counter_enable_0_we),
    .wd     (perf_counter_enable_0_wd),

    // from internal hardware
    .de     (1'b0),
    .d      ('0  ),

    // to internal hardware
    .qe     (),
    .q      (reg2hw.perf_counter_enable[0].q ),

    // to register interface (read)
    .qs     (perf_counter_enable_0_qs)
  );

  // Subregister 1 of Multireg perf_counter_enable
  // R[perf_counter_enable_1]: V(False)

  prim_subreg #(
    .DW      (1),
    .SWACCESS("RW"),
    .RESVAL  (1'h0)
  ) u_perf_counter_enable_1 (
    .clk_i   (clk_i    ),
    .rst_ni  (rst_ni  ),

    // from register interface
    .we     (perf_counter_enable_1_we),
    .wd     (perf_counter_enable_1_wd),

    // from internal hardware
    .de     (1'b0),
    .d      ('0  ),

    // to internal hardware
    .qe     (),
    .q      (reg2hw.perf_counter_enable[1].q ),

    // to register interface (read)
    .qs     (perf_counter_enable_1_qs)
  );

  // Subregister 2 of Multireg perf_counter_enable
  // R[perf_counter_enable_2]: V(False)

  prim_subreg #(
    .DW      (1),
    .SWACCESS("RW"),
    .RESVAL  (1'h0)
  ) u_perf_counter_enable_2 (
    .clk_i   (clk_i    ),
    .rst_ni  (rst_ni  ),

    // from register interface
    .we     (perf_counter_enable_2_we),
    .wd     (perf_counter_enable_2_wd),

    // from internal hardware
    .de     (1'b0),
    .d      ('0  ),

    // to internal hardware
    .qe     (),
    .q      (reg2hw.perf_counter_enable[2].q ),

    // to register interface (read)
    .qs     (perf_counter_enable_2_qs)
  );

  // Subregister 3 of Multireg perf_counter_enable
  // R[perf_counter_enable_3]: V(False)

  prim_subreg #(
    .DW      (1),
    .SWACCESS("RW"),
    .RESVAL  (1'h0)
  ) u_perf_counter_enable_3 (
    .clk_i   (clk_i    ),
    .rst_ni  (rst_ni  ),

    // from register interface
    .we     (perf_counter_enable_3_we),
    .wd     (perf_counter_enable_3_wd),

    // from internal hardware
    .de     (1'b0),
    .d      ('0  ),

    // to internal hardware
    .qe     (),
    .q      (reg2hw.perf_counter_enable[3].q ),

    // to register interface (read)
    .qs     (perf_counter_enable_3_qs)
  );

  // Subregister 4 of Multireg perf_counter_enable
  // R[perf_counter_enable_4]: V(False)

  prim_subreg #(
    .DW      (1),
    .SWACCESS("RW"),
    .RESVAL  (1'h0)
  ) u_perf_counter_enable_4 (
    .clk_i   (clk_i    ),
    .rst_ni  (rst_ni  ),

    // from register interface
    .we     (perf_counter_enable_4_we),
    .wd     (perf_counter_enable_4_wd),

    // from internal hardware
    .de     (1'b0),
    .d      ('0  ),

    // to internal hardware
    .qe     (),
    .q      (reg2hw.perf_counter_enable[4].q ),

    // to register interface (read)
    .qs     (perf_counter_enable_4_qs)
  );

  // Subregister 5 of Multireg perf_counter_enable
  // R[perf_counter_enable_5]: V(False)

  prim_subreg #(
    .DW      (1),
    .SWACCESS("RW"),
    .RESVAL  (1'h0)
  ) u_perf_counter_enable_5 (
    .clk_i   (clk_i    ),
    .rst_ni  (rst_ni  ),

    // from register interface
    .we     (perf_counter_enable_5_we),
    .wd     (perf_counter_enable_5_wd),

    // from internal hardware
    .de     (1'b0),
    .d      ('0  ),

    // to internal hardware
    .qe     (),
    .q      (reg2hw.perf_counter_enable[5].q ),

    // to register interface (read)
    .qs     (perf_counter_enable_5_qs)
  );

  // Subregister 6 of Multireg perf_counter_enable
  // R[perf_counter_enable_6]: V(False)

  prim_subreg #(
    .DW      (1),
    .SWACCESS("RW"),
    .RESVAL  (1'h0)
  ) u_perf_counter_enable_6 (
    .clk_i   (clk_i    ),
    .rst_ni  (rst_ni  ),

    // from register interface
    .we     (perf_counter_enable_6_we),
    .wd     (perf_counter_enable_6_wd),

    // from internal hardware
    .de     (1'b0),
    .d      ('0  ),

    // to internal hardware
    .qe     (),
    .q      (reg2hw.perf_counter_enable[6].q ),

    // to register interface (read)
    .qs     (perf_counter_enable_6_qs)
  );

  // Subregister 7 of Multireg perf_counter_enable
  // R[perf_counter_enable_7]: V(False)

  prim_subreg #(
    .DW      (1),
    .SWACCESS("RW"),
    .RESVAL  (1'h0)
  ) u_perf_counter_enable_7 (
    .clk_i   (clk_i    ),
    .rst_ni  (rst_ni  ),

    // from register interface
    .we     (perf_counter_enable_7_we),
    .wd     (perf_counter_enable_7_wd),

    // from internal hardware
    .de     (1'b0),
    .d      ('0  ),

    // to internal hardware
    .qe     (),
    .q      (reg2hw.perf_counter_enable[7].q ),

    // to register interface (read)
    .qs     (perf_counter_enable_7_qs)
  );

  // Subregister 8 of Multireg perf_counter_enable
  // R[perf_counter_enable_8]: V(False)

  prim_subreg #(
    .DW      (1),
    .SWACCESS("RW"),
    .RESVAL  (1'h0)
  ) u_perf_counter_enable_8 (
    .clk_i   (clk_i    ),
    .rst_ni  (rst_ni  ),

    // from register interface
    .we     (perf_counter_enable_8_we),
    .wd     (perf_counter_enable_8_wd),

    // from internal hardware
    .de     (1'b0),
    .d      ('0  ),

    // to internal hardware
    .qe     (),
    .q      (reg2hw.perf_counter_enable[8].q ),

    // to register interface (read)
    .qs     (perf_counter_enable_8_qs)
  );

  // Subregister 9 of Multireg perf_counter_enable
  // R[perf_counter_enable_9]: V(False)

  prim_subreg #(
    .DW      (1),
    .SWACCESS("RW"),
    .RESVAL  (1'h0)
  ) u_perf_counter_enable_9 (
    .clk_i   (clk_i    ),
    .rst_ni  (rst_ni  ),

    // from register interface
    .we     (perf_counter_enable_9_we),
    .wd     (perf_counter_enable_9_wd),

    // from internal hardware
    .de     (1'b0),
    .d      ('0  ),

    // to internal hardware
    .qe     (),
    .q      (reg2hw.perf_counter_enable[9].q ),

    // to register interface (read)
    .qs     (perf_counter_enable_9_qs)
  );

  // Subregister 10 of Multireg perf_counter_enable
  // R[perf_counter_enable_10]: V(False)

  prim_subreg #(
    .DW      (1),
    .SWACCESS("RW"),
    .RESVAL  (1'h0)
  ) u_perf_counter_enable_10 (
    .clk_i   (clk_i    ),
    .rst_ni  (rst_ni  ),

    // from register interface
    .we     (perf_counter_enable_10_we),
    .wd     (perf_counter_enable_10_wd),

    // from internal hardware
    .de     (1'b0),
    .d      ('0  ),

    // to internal hardware
    .qe     (),
    .q      (reg2hw.perf_counter_enable[10].q ),

    // to register interface (read)
    .qs     (perf_counter_enable_10_qs)
  );

  // Subregister 11 of Multireg perf_counter_enable
  // R[perf_counter_enable_11]: V(False)

  prim_subreg #(
    .DW      (1),
    .SWACCESS("RW"),
    .RESVAL  (1'h0)
  ) u_perf_counter_enable_11 (
    .clk_i   (clk_i    ),
    .rst_ni  (rst_ni  ),

    // from register interface
    .we     (perf_counter_enable_11_we),
    .wd     (perf_counter_enable_11_wd),

    // from internal hardware
    .de     (1'b0),
    .d      ('0  ),

    // to internal hardware
    .qe     (),
    .q      (reg2hw.perf_counter_enable[11].q ),

    // to register interface (read)
    .qs     (perf_counter_enable_11_qs)
  );

  // Subregister 12 of Multireg perf_counter_enable
  // R[perf_counter_enable_12]: V(False)

  prim_subreg #(
    .DW      (1),
    .SWACCESS("RW"),
    .RESVAL  (1'h0)
  ) u_perf_counter_enable_12 (
    .clk_i   (clk_i    ),
    .rst_ni  (rst_ni  ),

    // from register interface
    .we     (perf_counter_enable_12_we),
    .wd     (perf_counter_enable_12_wd),

    // from internal hardware
    .de     (1'b0),
    .d      ('0  ),

    // to internal hardware
    .qe     (),
    .q      (reg2hw.perf_counter_enable[12].q ),

    // to register interface (read)
    .qs     (perf_counter_enable_12_qs)
  );

  // Subregister 13 of Multireg perf_counter_enable
  // R[perf_counter_enable_13]: V(False)

  prim_subreg #(
    .DW      (1),
    .SWACCESS("RW"),
    .RESVAL  (1'h0)
  ) u_perf_counter_enable_13 (
    .clk_i   (clk_i    ),
    .rst_ni  (rst_ni  ),

    // from register interface
    .we     (perf_counter_enable_13_we),
    .wd     (perf_counter_enable_13_wd),

    // from internal hardware
    .de     (1'b0),
    .d      ('0  ),

    // to internal hardware
    .qe     (),
    .q      (reg2hw.perf_counter_enable[13].q ),

    // to register interface (read)
    .qs     (perf_counter_enable_13_qs)
  );

  // Subregister 14 of Multireg perf_counter_enable
  // R[perf_counter_enable_14]: V(False)

  prim_subreg #(
    .DW      (1),
    .SWACCESS("RW"),
    .RESVAL  (1'h0)
  ) u_perf_counter_enable_14 (
    .clk_i   (clk_i    ),
    .rst_ni  (rst_ni  ),

    // from register interface
    .we     (perf_counter_enable_14_we),
    .wd     (perf_counter_enable_14_wd),

    // from internal hardware
    .de     (1'b0),
    .d      ('0  ),

    // to internal hardware
    .qe     (),
    .q      (reg2hw.perf_counter_enable[14].q ),

    // to register interface (read)
    .qs     (perf_counter_enable_14_qs)
  );

  // Subregister 15 of Multireg perf_counter_enable
  // R[perf_counter_enable_15]: V(False)

  prim_subreg #(
    .DW      (1),
    .SWACCESS("RW"),
    .RESVAL  (1'h0)
  ) u_perf_counter_enable_15 (
    .clk_i   (clk_i    ),
    .rst_ni  (rst_ni  ),

    // from register interface
    .we     (perf_counter_enable_15_we),
    .wd     (perf_counter_enable_15_wd),

    // from internal hardware
    .de     (1'b0),
    .d      ('0  ),

    // to internal hardware
    .qe     (),
    .q      (reg2hw.perf_counter_enable[15].q ),

    // to register interface (read)
    .qs     (perf_counter_enable_15_qs)
  );



  // Subregister 0 of Multireg perf_counter_select
  // R[perf_counter_select_0]: V(True)

  prim_subreg_ext #(
    .DW    (10)
  ) u_perf_counter_select_0 (
    .re     (perf_counter_select_0_re),
    .we     (perf_counter_select_0_we),
    .wd     (perf_counter_select_0_wd),
    .d      (hw2reg.perf_counter_select[0].d),
    .qre    (),
    .qe     (reg2hw.perf_counter_select[0].qe),
    .q      (reg2hw.perf_counter_select[0].q ),
    .qs     (perf_counter_select_0_qs)
  );

  // Subregister 1 of Multireg perf_counter_select
  // R[perf_counter_select_1]: V(True)

  prim_subreg_ext #(
    .DW    (10)
  ) u_perf_counter_select_1 (
    .re     (perf_counter_select_1_re),
    .we     (perf_counter_select_1_we),
    .wd     (perf_counter_select_1_wd),
    .d      (hw2reg.perf_counter_select[1].d),
    .qre    (),
    .qe     (reg2hw.perf_counter_select[1].qe),
    .q      (reg2hw.perf_counter_select[1].q ),
    .qs     (perf_counter_select_1_qs)
  );

  // Subregister 2 of Multireg perf_counter_select
  // R[perf_counter_select_2]: V(True)

  prim_subreg_ext #(
    .DW    (10)
  ) u_perf_counter_select_2 (
    .re     (perf_counter_select_2_re),
    .we     (perf_counter_select_2_we),
    .wd     (perf_counter_select_2_wd),
    .d      (hw2reg.perf_counter_select[2].d),
    .qre    (),
    .qe     (reg2hw.perf_counter_select[2].qe),
    .q      (reg2hw.perf_counter_select[2].q ),
    .qs     (perf_counter_select_2_qs)
  );

  // Subregister 3 of Multireg perf_counter_select
  // R[perf_counter_select_3]: V(True)

  prim_subreg_ext #(
    .DW    (10)
  ) u_perf_counter_select_3 (
    .re     (perf_counter_select_3_re),
    .we     (perf_counter_select_3_we),
    .wd     (perf_counter_select_3_wd),
    .d      (hw2reg.perf_counter_select[3].d),
    .qre    (),
    .qe     (reg2hw.perf_counter_select[3].qe),
    .q      (reg2hw.perf_counter_select[3].q ),
    .qs     (perf_counter_select_3_qs)
  );

  // Subregister 4 of Multireg perf_counter_select
  // R[perf_counter_select_4]: V(True)

  prim_subreg_ext #(
    .DW    (10)
  ) u_perf_counter_select_4 (
    .re     (perf_counter_select_4_re),
    .we     (perf_counter_select_4_we),
    .wd     (perf_counter_select_4_wd),
    .d      (hw2reg.perf_counter_select[4].d),
    .qre    (),
    .qe     (reg2hw.perf_counter_select[4].qe),
    .q      (reg2hw.perf_counter_select[4].q ),
    .qs     (perf_counter_select_4_qs)
  );

  // Subregister 5 of Multireg perf_counter_select
  // R[perf_counter_select_5]: V(True)

  prim_subreg_ext #(
    .DW    (10)
  ) u_perf_counter_select_5 (
    .re     (perf_counter_select_5_re),
    .we     (perf_counter_select_5_we),
    .wd     (perf_counter_select_5_wd),
    .d      (hw2reg.perf_counter_select[5].d),
    .qre    (),
    .qe     (reg2hw.perf_counter_select[5].qe),
    .q      (reg2hw.perf_counter_select[5].q ),
    .qs     (perf_counter_select_5_qs)
  );

  // Subregister 6 of Multireg perf_counter_select
  // R[perf_counter_select_6]: V(True)

  prim_subreg_ext #(
    .DW    (10)
  ) u_perf_counter_select_6 (
    .re     (perf_counter_select_6_re),
    .we     (perf_counter_select_6_we),
    .wd     (perf_counter_select_6_wd),
    .d      (hw2reg.perf_counter_select[6].d),
    .qre    (),
    .qe     (reg2hw.perf_counter_select[6].qe),
    .q      (reg2hw.perf_counter_select[6].q ),
    .qs     (perf_counter_select_6_qs)
  );

  // Subregister 7 of Multireg perf_counter_select
  // R[perf_counter_select_7]: V(True)

  prim_subreg_ext #(
    .DW    (10)
  ) u_perf_counter_select_7 (
    .re     (perf_counter_select_7_re),
    .we     (perf_counter_select_7_we),
    .wd     (perf_counter_select_7_wd),
    .d      (hw2reg.perf_counter_select[7].d),
    .qre    (),
    .qe     (reg2hw.perf_counter_select[7].qe),
    .q      (reg2hw.perf_counter_select[7].q ),
    .qs     (perf_counter_select_7_qs)
  );

  // Subregister 8 of Multireg perf_counter_select
  // R[perf_counter_select_8]: V(True)

  prim_subreg_ext #(
    .DW    (10)
  ) u_perf_counter_select_8 (
    .re     (perf_counter_select_8_re),
    .we     (perf_counter_select_8_we),
    .wd     (perf_counter_select_8_wd),
    .d      (hw2reg.perf_counter_select[8].d),
    .qre    (),
    .qe     (reg2hw.perf_counter_select[8].qe),
    .q      (reg2hw.perf_counter_select[8].q ),
    .qs     (perf_counter_select_8_qs)
  );

  // Subregister 9 of Multireg perf_counter_select
  // R[perf_counter_select_9]: V(True)

  prim_subreg_ext #(
    .DW    (10)
  ) u_perf_counter_select_9 (
    .re     (perf_counter_select_9_re),
    .we     (perf_counter_select_9_we),
    .wd     (perf_counter_select_9_wd),
    .d      (hw2reg.perf_counter_select[9].d),
    .qre    (),
    .qe     (reg2hw.perf_counter_select[9].qe),
    .q      (reg2hw.perf_counter_select[9].q ),
    .qs     (perf_counter_select_9_qs)
  );

  // Subregister 10 of Multireg perf_counter_select
  // R[perf_counter_select_10]: V(True)

  prim_subreg_ext #(
    .DW    (10)
  ) u_perf_counter_select_10 (
    .re     (perf_counter_select_10_re),
    .we     (perf_counter_select_10_we),
    .wd     (perf_counter_select_10_wd),
    .d      (hw2reg.perf_counter_select[10].d),
    .qre    (),
    .qe     (reg2hw.perf_counter_select[10].qe),
    .q      (reg2hw.perf_counter_select[10].q ),
    .qs     (perf_counter_select_10_qs)
  );

  // Subregister 11 of Multireg perf_counter_select
  // R[perf_counter_select_11]: V(True)

  prim_subreg_ext #(
    .DW    (10)
  ) u_perf_counter_select_11 (
    .re     (perf_counter_select_11_re),
    .we     (perf_counter_select_11_we),
    .wd     (perf_counter_select_11_wd),
    .d      (hw2reg.perf_counter_select[11].d),
    .qre    (),
    .qe     (reg2hw.perf_counter_select[11].qe),
    .q      (reg2hw.perf_counter_select[11].q ),
    .qs     (perf_counter_select_11_qs)
  );

  // Subregister 12 of Multireg perf_counter_select
  // R[perf_counter_select_12]: V(True)

  prim_subreg_ext #(
    .DW    (10)
  ) u_perf_counter_select_12 (
    .re     (perf_counter_select_12_re),
    .we     (perf_counter_select_12_we),
    .wd     (perf_counter_select_12_wd),
    .d      (hw2reg.perf_counter_select[12].d),
    .qre    (),
    .qe     (reg2hw.perf_counter_select[12].qe),
    .q      (reg2hw.perf_counter_select[12].q ),
    .qs     (perf_counter_select_12_qs)
  );

  // Subregister 13 of Multireg perf_counter_select
  // R[perf_counter_select_13]: V(True)

  prim_subreg_ext #(
    .DW    (10)
  ) u_perf_counter_select_13 (
    .re     (perf_counter_select_13_re),
    .we     (perf_counter_select_13_we),
    .wd     (perf_counter_select_13_wd),
    .d      (hw2reg.perf_counter_select[13].d),
    .qre    (),
    .qe     (reg2hw.perf_counter_select[13].qe),
    .q      (reg2hw.perf_counter_select[13].q ),
    .qs     (perf_counter_select_13_qs)
  );

  // Subregister 14 of Multireg perf_counter_select
  // R[perf_counter_select_14]: V(True)

  prim_subreg_ext #(
    .DW    (10)
  ) u_perf_counter_select_14 (
    .re     (perf_counter_select_14_re),
    .we     (perf_counter_select_14_we),
    .wd     (perf_counter_select_14_wd),
    .d      (hw2reg.perf_counter_select[14].d),
    .qre    (),
    .qe     (reg2hw.perf_counter_select[14].qe),
    .q      (reg2hw.perf_counter_select[14].q ),
    .qs     (perf_counter_select_14_qs)
  );

  // Subregister 15 of Multireg perf_counter_select
  // R[perf_counter_select_15]: V(True)

  prim_subreg_ext #(
    .DW    (10)
  ) u_perf_counter_select_15 (
    .re     (perf_counter_select_15_re),
    .we     (perf_counter_select_15_we),
    .wd     (perf_counter_select_15_wd),
    .d      (hw2reg.perf_counter_select[15].d),
    .qre    (),
    .qe     (reg2hw.perf_counter_select[15].qe),
    .q      (reg2hw.perf_counter_select[15].q ),
    .qs     (perf_counter_select_15_qs)
  );



  // Subregister 0 of Multireg perf_counter_hart_select
  // R[perf_counter_hart_select_0]: V(False)

  prim_subreg #(
    .DW      (10),
    .SWACCESS("RW"),
    .RESVAL  (10'h0)
  ) u_perf_counter_hart_select_0 (
    .clk_i   (clk_i    ),
    .rst_ni  (rst_ni  ),

    // from register interface
    .we     (perf_counter_hart_select_0_we),
    .wd     (perf_counter_hart_select_0_wd),

    // from internal hardware
    .de     (1'b0),
    .d      ('0  ),

    // to internal hardware
    .qe     (),
    .q      (reg2hw.perf_counter_hart_select[0].q ),

    // to register interface (read)
    .qs     (perf_counter_hart_select_0_qs)
  );

  // Subregister 1 of Multireg perf_counter_hart_select
  // R[perf_counter_hart_select_1]: V(False)

  prim_subreg #(
    .DW      (10),
    .SWACCESS("RW"),
    .RESVAL  (10'h0)
  ) u_perf_counter_hart_select_1 (
    .clk_i   (clk_i    ),
    .rst_ni  (rst_ni  ),

    // from register interface
    .we     (perf_counter_hart_select_1_we),
    .wd     (perf_counter_hart_select_1_wd),

    // from internal hardware
    .de     (1'b0),
    .d      ('0  ),

    // to internal hardware
    .qe     (),
    .q      (reg2hw.perf_counter_hart_select[1].q ),

    // to register interface (read)
    .qs     (perf_counter_hart_select_1_qs)
  );

  // Subregister 2 of Multireg perf_counter_hart_select
  // R[perf_counter_hart_select_2]: V(False)

  prim_subreg #(
    .DW      (10),
    .SWACCESS("RW"),
    .RESVAL  (10'h0)
  ) u_perf_counter_hart_select_2 (
    .clk_i   (clk_i    ),
    .rst_ni  (rst_ni  ),

    // from register interface
    .we     (perf_counter_hart_select_2_we),
    .wd     (perf_counter_hart_select_2_wd),

    // from internal hardware
    .de     (1'b0),
    .d      ('0  ),

    // to internal hardware
    .qe     (),
    .q      (reg2hw.perf_counter_hart_select[2].q ),

    // to register interface (read)
    .qs     (perf_counter_hart_select_2_qs)
  );

  // Subregister 3 of Multireg perf_counter_hart_select
  // R[perf_counter_hart_select_3]: V(False)

  prim_subreg #(
    .DW      (10),
    .SWACCESS("RW"),
    .RESVAL  (10'h0)
  ) u_perf_counter_hart_select_3 (
    .clk_i   (clk_i    ),
    .rst_ni  (rst_ni  ),

    // from register interface
    .we     (perf_counter_hart_select_3_we),
    .wd     (perf_counter_hart_select_3_wd),

    // from internal hardware
    .de     (1'b0),
    .d      ('0  ),

    // to internal hardware
    .qe     (),
    .q      (reg2hw.perf_counter_hart_select[3].q ),

    // to register interface (read)
    .qs     (perf_counter_hart_select_3_qs)
  );

  // Subregister 4 of Multireg perf_counter_hart_select
  // R[perf_counter_hart_select_4]: V(False)

  prim_subreg #(
    .DW      (10),
    .SWACCESS("RW"),
    .RESVAL  (10'h0)
  ) u_perf_counter_hart_select_4 (
    .clk_i   (clk_i    ),
    .rst_ni  (rst_ni  ),

    // from register interface
    .we     (perf_counter_hart_select_4_we),
    .wd     (perf_counter_hart_select_4_wd),

    // from internal hardware
    .de     (1'b0),
    .d      ('0  ),

    // to internal hardware
    .qe     (),
    .q      (reg2hw.perf_counter_hart_select[4].q ),

    // to register interface (read)
    .qs     (perf_counter_hart_select_4_qs)
  );

  // Subregister 5 of Multireg perf_counter_hart_select
  // R[perf_counter_hart_select_5]: V(False)

  prim_subreg #(
    .DW      (10),
    .SWACCESS("RW"),
    .RESVAL  (10'h0)
  ) u_perf_counter_hart_select_5 (
    .clk_i   (clk_i    ),
    .rst_ni  (rst_ni  ),

    // from register interface
    .we     (perf_counter_hart_select_5_we),
    .wd     (perf_counter_hart_select_5_wd),

    // from internal hardware
    .de     (1'b0),
    .d      ('0  ),

    // to internal hardware
    .qe     (),
    .q      (reg2hw.perf_counter_hart_select[5].q ),

    // to register interface (read)
    .qs     (perf_counter_hart_select_5_qs)
  );

  // Subregister 6 of Multireg perf_counter_hart_select
  // R[perf_counter_hart_select_6]: V(False)

  prim_subreg #(
    .DW      (10),
    .SWACCESS("RW"),
    .RESVAL  (10'h0)
  ) u_perf_counter_hart_select_6 (
    .clk_i   (clk_i    ),
    .rst_ni  (rst_ni  ),

    // from register interface
    .we     (perf_counter_hart_select_6_we),
    .wd     (perf_counter_hart_select_6_wd),

    // from internal hardware
    .de     (1'b0),
    .d      ('0  ),

    // to internal hardware
    .qe     (),
    .q      (reg2hw.perf_counter_hart_select[6].q ),

    // to register interface (read)
    .qs     (perf_counter_hart_select_6_qs)
  );

  // Subregister 7 of Multireg perf_counter_hart_select
  // R[perf_counter_hart_select_7]: V(False)

  prim_subreg #(
    .DW      (10),
    .SWACCESS("RW"),
    .RESVAL  (10'h0)
  ) u_perf_counter_hart_select_7 (
    .clk_i   (clk_i    ),
    .rst_ni  (rst_ni  ),

    // from register interface
    .we     (perf_counter_hart_select_7_we),
    .wd     (perf_counter_hart_select_7_wd),

    // from internal hardware
    .de     (1'b0),
    .d      ('0  ),

    // to internal hardware
    .qe     (),
    .q      (reg2hw.perf_counter_hart_select[7].q ),

    // to register interface (read)
    .qs     (perf_counter_hart_select_7_qs)
  );

  // Subregister 8 of Multireg perf_counter_hart_select
  // R[perf_counter_hart_select_8]: V(False)

  prim_subreg #(
    .DW      (10),
    .SWACCESS("RW"),
    .RESVAL  (10'h0)
  ) u_perf_counter_hart_select_8 (
    .clk_i   (clk_i    ),
    .rst_ni  (rst_ni  ),

    // from register interface
    .we     (perf_counter_hart_select_8_we),
    .wd     (perf_counter_hart_select_8_wd),

    // from internal hardware
    .de     (1'b0),
    .d      ('0  ),

    // to internal hardware
    .qe     (),
    .q      (reg2hw.perf_counter_hart_select[8].q ),

    // to register interface (read)
    .qs     (perf_counter_hart_select_8_qs)
  );

  // Subregister 9 of Multireg perf_counter_hart_select
  // R[perf_counter_hart_select_9]: V(False)

  prim_subreg #(
    .DW      (10),
    .SWACCESS("RW"),
    .RESVAL  (10'h0)
  ) u_perf_counter_hart_select_9 (
    .clk_i   (clk_i    ),
    .rst_ni  (rst_ni  ),

    // from register interface
    .we     (perf_counter_hart_select_9_we),
    .wd     (perf_counter_hart_select_9_wd),

    // from internal hardware
    .de     (1'b0),
    .d      ('0  ),

    // to internal hardware
    .qe     (),
    .q      (reg2hw.perf_counter_hart_select[9].q ),

    // to register interface (read)
    .qs     (perf_counter_hart_select_9_qs)
  );

  // Subregister 10 of Multireg perf_counter_hart_select
  // R[perf_counter_hart_select_10]: V(False)

  prim_subreg #(
    .DW      (10),
    .SWACCESS("RW"),
    .RESVAL  (10'h0)
  ) u_perf_counter_hart_select_10 (
    .clk_i   (clk_i    ),
    .rst_ni  (rst_ni  ),

    // from register interface
    .we     (perf_counter_hart_select_10_we),
    .wd     (perf_counter_hart_select_10_wd),

    // from internal hardware
    .de     (1'b0),
    .d      ('0  ),

    // to internal hardware
    .qe     (),
    .q      (reg2hw.perf_counter_hart_select[10].q ),

    // to register interface (read)
    .qs     (perf_counter_hart_select_10_qs)
  );

  // Subregister 11 of Multireg perf_counter_hart_select
  // R[perf_counter_hart_select_11]: V(False)

  prim_subreg #(
    .DW      (10),
    .SWACCESS("RW"),
    .RESVAL  (10'h0)
  ) u_perf_counter_hart_select_11 (
    .clk_i   (clk_i    ),
    .rst_ni  (rst_ni  ),

    // from register interface
    .we     (perf_counter_hart_select_11_we),
    .wd     (perf_counter_hart_select_11_wd),

    // from internal hardware
    .de     (1'b0),
    .d      ('0  ),

    // to internal hardware
    .qe     (),
    .q      (reg2hw.perf_counter_hart_select[11].q ),

    // to register interface (read)
    .qs     (perf_counter_hart_select_11_qs)
  );

  // Subregister 12 of Multireg perf_counter_hart_select
  // R[perf_counter_hart_select_12]: V(False)

  prim_subreg #(
    .DW      (10),
    .SWACCESS("RW"),
    .RESVAL  (10'h0)
  ) u_perf_counter_hart_select_12 (
    .clk_i   (clk_i    ),
    .rst_ni  (rst_ni  ),

    // from register interface
    .we     (perf_counter_hart_select_12_we),
    .wd     (perf_counter_hart_select_12_wd),

    // from internal hardware
    .de     (1'b0),
    .d      ('0  ),

    // to internal hardware
    .qe     (),
    .q      (reg2hw.perf_counter_hart_select[12].q ),

    // to register interface (read)
    .qs     (perf_counter_hart_select_12_qs)
  );

  // Subregister 13 of Multireg perf_counter_hart_select
  // R[perf_counter_hart_select_13]: V(False)

  prim_subreg #(
    .DW      (10),
    .SWACCESS("RW"),
    .RESVAL  (10'h0)
  ) u_perf_counter_hart_select_13 (
    .clk_i   (clk_i    ),
    .rst_ni  (rst_ni  ),

    // from register interface
    .we     (perf_counter_hart_select_13_we),
    .wd     (perf_counter_hart_select_13_wd),

    // from internal hardware
    .de     (1'b0),
    .d      ('0  ),

    // to internal hardware
    .qe     (),
    .q      (reg2hw.perf_counter_hart_select[13].q ),

    // to register interface (read)
    .qs     (perf_counter_hart_select_13_qs)
  );

  // Subregister 14 of Multireg perf_counter_hart_select
  // R[perf_counter_hart_select_14]: V(False)

  prim_subreg #(
    .DW      (10),
    .SWACCESS("RW"),
    .RESVAL  (10'h0)
  ) u_perf_counter_hart_select_14 (
    .clk_i   (clk_i    ),
    .rst_ni  (rst_ni  ),

    // from register interface
    .we     (perf_counter_hart_select_14_we),
    .wd     (perf_counter_hart_select_14_wd),

    // from internal hardware
    .de     (1'b0),
    .d      ('0  ),

    // to internal hardware
    .qe     (),
    .q      (reg2hw.perf_counter_hart_select[14].q ),

    // to register interface (read)
    .qs     (perf_counter_hart_select_14_qs)
  );

  // Subregister 15 of Multireg perf_counter_hart_select
  // R[perf_counter_hart_select_15]: V(False)

  prim_subreg #(
    .DW      (10),
    .SWACCESS("RW"),
    .RESVAL  (10'h0)
  ) u_perf_counter_hart_select_15 (
    .clk_i   (clk_i    ),
    .rst_ni  (rst_ni  ),

    // from register interface
    .we     (perf_counter_hart_select_15_we),
    .wd     (perf_counter_hart_select_15_wd),

    // from internal hardware
    .de     (1'b0),
    .d      ('0  ),

    // to internal hardware
    .qe     (),
    .q      (reg2hw.perf_counter_hart_select[15].q ),

    // to register interface (read)
    .qs     (perf_counter_hart_select_15_qs)
  );



  // Subregister 0 of Multireg perf_counter
  // R[perf_counter_0]: V(True)

  prim_subreg_ext #(
    .DW    (48)
  ) u_perf_counter_0 (
    .re     (perf_counter_0_re),
    .we     (perf_counter_0_we),
    .wd     (perf_counter_0_wd),
    .d      (hw2reg.perf_counter[0].d),
    .qre    (),
    .qe     (reg2hw.perf_counter[0].qe),
    .q      (reg2hw.perf_counter[0].q ),
    .qs     (perf_counter_0_qs)
  );

  // Subregister 1 of Multireg perf_counter
  // R[perf_counter_1]: V(True)

  prim_subreg_ext #(
    .DW    (48)
  ) u_perf_counter_1 (
    .re     (perf_counter_1_re),
    .we     (perf_counter_1_we),
    .wd     (perf_counter_1_wd),
    .d      (hw2reg.perf_counter[1].d),
    .qre    (),
    .qe     (reg2hw.perf_counter[1].qe),
    .q      (reg2hw.perf_counter[1].q ),
    .qs     (perf_counter_1_qs)
  );

  // Subregister 2 of Multireg perf_counter
  // R[perf_counter_2]: V(True)

  prim_subreg_ext #(
    .DW    (48)
  ) u_perf_counter_2 (
    .re     (perf_counter_2_re),
    .we     (perf_counter_2_we),
    .wd     (perf_counter_2_wd),
    .d      (hw2reg.perf_counter[2].d),
    .qre    (),
    .qe     (reg2hw.perf_counter[2].qe),
    .q      (reg2hw.perf_counter[2].q ),
    .qs     (perf_counter_2_qs)
  );

  // Subregister 3 of Multireg perf_counter
  // R[perf_counter_3]: V(True)

  prim_subreg_ext #(
    .DW    (48)
  ) u_perf_counter_3 (
    .re     (perf_counter_3_re),
    .we     (perf_counter_3_we),
    .wd     (perf_counter_3_wd),
    .d      (hw2reg.perf_counter[3].d),
    .qre    (),
    .qe     (reg2hw.perf_counter[3].qe),
    .q      (reg2hw.perf_counter[3].q ),
    .qs     (perf_counter_3_qs)
  );

  // Subregister 4 of Multireg perf_counter
  // R[perf_counter_4]: V(True)

  prim_subreg_ext #(
    .DW    (48)
  ) u_perf_counter_4 (
    .re     (perf_counter_4_re),
    .we     (perf_counter_4_we),
    .wd     (perf_counter_4_wd),
    .d      (hw2reg.perf_counter[4].d),
    .qre    (),
    .qe     (reg2hw.perf_counter[4].qe),
    .q      (reg2hw.perf_counter[4].q ),
    .qs     (perf_counter_4_qs)
  );

  // Subregister 5 of Multireg perf_counter
  // R[perf_counter_5]: V(True)

  prim_subreg_ext #(
    .DW    (48)
  ) u_perf_counter_5 (
    .re     (perf_counter_5_re),
    .we     (perf_counter_5_we),
    .wd     (perf_counter_5_wd),
    .d      (hw2reg.perf_counter[5].d),
    .qre    (),
    .qe     (reg2hw.perf_counter[5].qe),
    .q      (reg2hw.perf_counter[5].q ),
    .qs     (perf_counter_5_qs)
  );

  // Subregister 6 of Multireg perf_counter
  // R[perf_counter_6]: V(True)

  prim_subreg_ext #(
    .DW    (48)
  ) u_perf_counter_6 (
    .re     (perf_counter_6_re),
    .we     (perf_counter_6_we),
    .wd     (perf_counter_6_wd),
    .d      (hw2reg.perf_counter[6].d),
    .qre    (),
    .qe     (reg2hw.perf_counter[6].qe),
    .q      (reg2hw.perf_counter[6].q ),
    .qs     (perf_counter_6_qs)
  );

  // Subregister 7 of Multireg perf_counter
  // R[perf_counter_7]: V(True)

  prim_subreg_ext #(
    .DW    (48)
  ) u_perf_counter_7 (
    .re     (perf_counter_7_re),
    .we     (perf_counter_7_we),
    .wd     (perf_counter_7_wd),
    .d      (hw2reg.perf_counter[7].d),
    .qre    (),
    .qe     (reg2hw.perf_counter[7].qe),
    .q      (reg2hw.perf_counter[7].q ),
    .qs     (perf_counter_7_qs)
  );

  // Subregister 8 of Multireg perf_counter
  // R[perf_counter_8]: V(True)

  prim_subreg_ext #(
    .DW    (48)
  ) u_perf_counter_8 (
    .re     (perf_counter_8_re),
    .we     (perf_counter_8_we),
    .wd     (perf_counter_8_wd),
    .d      (hw2reg.perf_counter[8].d),
    .qre    (),
    .qe     (reg2hw.perf_counter[8].qe),
    .q      (reg2hw.perf_counter[8].q ),
    .qs     (perf_counter_8_qs)
  );

  // Subregister 9 of Multireg perf_counter
  // R[perf_counter_9]: V(True)

  prim_subreg_ext #(
    .DW    (48)
  ) u_perf_counter_9 (
    .re     (perf_counter_9_re),
    .we     (perf_counter_9_we),
    .wd     (perf_counter_9_wd),
    .d      (hw2reg.perf_counter[9].d),
    .qre    (),
    .qe     (reg2hw.perf_counter[9].qe),
    .q      (reg2hw.perf_counter[9].q ),
    .qs     (perf_counter_9_qs)
  );

  // Subregister 10 of Multireg perf_counter
  // R[perf_counter_10]: V(True)

  prim_subreg_ext #(
    .DW    (48)
  ) u_perf_counter_10 (
    .re     (perf_counter_10_re),
    .we     (perf_counter_10_we),
    .wd     (perf_counter_10_wd),
    .d      (hw2reg.perf_counter[10].d),
    .qre    (),
    .qe     (reg2hw.perf_counter[10].qe),
    .q      (reg2hw.perf_counter[10].q ),
    .qs     (perf_counter_10_qs)
  );

  // Subregister 11 of Multireg perf_counter
  // R[perf_counter_11]: V(True)

  prim_subreg_ext #(
    .DW    (48)
  ) u_perf_counter_11 (
    .re     (perf_counter_11_re),
    .we     (perf_counter_11_we),
    .wd     (perf_counter_11_wd),
    .d      (hw2reg.perf_counter[11].d),
    .qre    (),
    .qe     (reg2hw.perf_counter[11].qe),
    .q      (reg2hw.perf_counter[11].q ),
    .qs     (perf_counter_11_qs)
  );

  // Subregister 12 of Multireg perf_counter
  // R[perf_counter_12]: V(True)

  prim_subreg_ext #(
    .DW    (48)
  ) u_perf_counter_12 (
    .re     (perf_counter_12_re),
    .we     (perf_counter_12_we),
    .wd     (perf_counter_12_wd),
    .d      (hw2reg.perf_counter[12].d),
    .qre    (),
    .qe     (reg2hw.perf_counter[12].qe),
    .q      (reg2hw.perf_counter[12].q ),
    .qs     (perf_counter_12_qs)
  );

  // Subregister 13 of Multireg perf_counter
  // R[perf_counter_13]: V(True)

  prim_subreg_ext #(
    .DW    (48)
  ) u_perf_counter_13 (
    .re     (perf_counter_13_re),
    .we     (perf_counter_13_we),
    .wd     (perf_counter_13_wd),
    .d      (hw2reg.perf_counter[13].d),
    .qre    (),
    .qe     (reg2hw.perf_counter[13].qe),
    .q      (reg2hw.perf_counter[13].q ),
    .qs     (perf_counter_13_qs)
  );

  // Subregister 14 of Multireg perf_counter
  // R[perf_counter_14]: V(True)

  prim_subreg_ext #(
    .DW    (48)
  ) u_perf_counter_14 (
    .re     (perf_counter_14_re),
    .we     (perf_counter_14_we),
    .wd     (perf_counter_14_wd),
    .d      (hw2reg.perf_counter[14].d),
    .qre    (),
    .qe     (reg2hw.perf_counter[14].qe),
    .q      (reg2hw.perf_counter[14].q ),
    .qs     (perf_counter_14_qs)
  );

  // Subregister 15 of Multireg perf_counter
  // R[perf_counter_15]: V(True)

  prim_subreg_ext #(
    .DW    (48)
  ) u_perf_counter_15 (
    .re     (perf_counter_15_re),
    .we     (perf_counter_15_we),
    .wd     (perf_counter_15_wd),
    .d      (hw2reg.perf_counter[15].d),
    .qre    (),
    .qe     (reg2hw.perf_counter[15].qe),
    .q      (reg2hw.perf_counter[15].q ),
    .qs     (perf_counter_15_qs)
  );


  // R[cl_clint_set]: V(True)

  prim_subreg_ext #(
    .DW    (32)
  ) u_cl_clint_set (
    .re     (1'b0),
    .we     (cl_clint_set_we),
    .wd     (cl_clint_set_wd),
    .d      ('0),
    .qre    (),
    .qe     (reg2hw.cl_clint_set.qe),
    .q      (reg2hw.cl_clint_set.q ),
    .qs     ()
  );


  // R[cl_clint_clear]: V(True)

  prim_subreg_ext #(
    .DW    (32)
  ) u_cl_clint_clear (
    .re     (1'b0),
    .we     (cl_clint_clear_we),
    .wd     (cl_clint_clear_wd),
    .d      ('0),
    .qre    (),
    .qe     (reg2hw.cl_clint_clear.qe),
    .q      (reg2hw.cl_clint_clear.q ),
    .qs     ()
  );


  // R[hw_barrier]: V(True)

  prim_subreg_ext #(
    .DW    (32)
  ) u_hw_barrier (
    .re     (hw_barrier_re),
    .we     (1'b0),
    .wd     ('0),
    .d      (hw2reg.hw_barrier.d),
    .qre    (),
    .qe     (),
    .q      (reg2hw.hw_barrier.q ),
    .qs     (hw_barrier_qs)
  );


  // R[icache_prefetch_enable]: V(False)

  prim_subreg #(
    .DW      (1),
    .SWACCESS("WO"),
    .RESVAL  (1'h1)
  ) u_icache_prefetch_enable (
    .clk_i   (clk_i    ),
    .rst_ni  (rst_ni  ),

    // from register interface
    .we     (icache_prefetch_enable_we),
    .wd     (icache_prefetch_enable_wd),

    // from internal hardware
    .de     (1'b0),
    .d      ('0  ),

    // to internal hardware
    .qe     (),
    .q      (reg2hw.icache_prefetch_enable.q ),

    .qs     ()
  );




  logic [67:0] addr_hit;
  always_comb begin
    addr_hit = '0;
    addr_hit[ 0] = (reg_addr == SNITCH_CLUSTER_PERIPHERAL_PERF_COUNTER_ENABLE_0_OFFSET);
    addr_hit[ 1] = (reg_addr == SNITCH_CLUSTER_PERIPHERAL_PERF_COUNTER_ENABLE_1_OFFSET);
    addr_hit[ 2] = (reg_addr == SNITCH_CLUSTER_PERIPHERAL_PERF_COUNTER_ENABLE_2_OFFSET);
    addr_hit[ 3] = (reg_addr == SNITCH_CLUSTER_PERIPHERAL_PERF_COUNTER_ENABLE_3_OFFSET);
    addr_hit[ 4] = (reg_addr == SNITCH_CLUSTER_PERIPHERAL_PERF_COUNTER_ENABLE_4_OFFSET);
    addr_hit[ 5] = (reg_addr == SNITCH_CLUSTER_PERIPHERAL_PERF_COUNTER_ENABLE_5_OFFSET);
    addr_hit[ 6] = (reg_addr == SNITCH_CLUSTER_PERIPHERAL_PERF_COUNTER_ENABLE_6_OFFSET);
    addr_hit[ 7] = (reg_addr == SNITCH_CLUSTER_PERIPHERAL_PERF_COUNTER_ENABLE_7_OFFSET);
    addr_hit[ 8] = (reg_addr == SNITCH_CLUSTER_PERIPHERAL_PERF_COUNTER_ENABLE_8_OFFSET);
    addr_hit[ 9] = (reg_addr == SNITCH_CLUSTER_PERIPHERAL_PERF_COUNTER_ENABLE_9_OFFSET);
    addr_hit[10] = (reg_addr == SNITCH_CLUSTER_PERIPHERAL_PERF_COUNTER_ENABLE_10_OFFSET);
    addr_hit[11] = (reg_addr == SNITCH_CLUSTER_PERIPHERAL_PERF_COUNTER_ENABLE_11_OFFSET);
    addr_hit[12] = (reg_addr == SNITCH_CLUSTER_PERIPHERAL_PERF_COUNTER_ENABLE_12_OFFSET);
    addr_hit[13] = (reg_addr == SNITCH_CLUSTER_PERIPHERAL_PERF_COUNTER_ENABLE_13_OFFSET);
    addr_hit[14] = (reg_addr == SNITCH_CLUSTER_PERIPHERAL_PERF_COUNTER_ENABLE_14_OFFSET);
    addr_hit[15] = (reg_addr == SNITCH_CLUSTER_PERIPHERAL_PERF_COUNTER_ENABLE_15_OFFSET);
    addr_hit[16] = (reg_addr == SNITCH_CLUSTER_PERIPHERAL_PERF_COUNTER_SELECT_0_OFFSET);
    addr_hit[17] = (reg_addr == SNITCH_CLUSTER_PERIPHERAL_PERF_COUNTER_SELECT_1_OFFSET);
    addr_hit[18] = (reg_addr == SNITCH_CLUSTER_PERIPHERAL_PERF_COUNTER_SELECT_2_OFFSET);
    addr_hit[19] = (reg_addr == SNITCH_CLUSTER_PERIPHERAL_PERF_COUNTER_SELECT_3_OFFSET);
    addr_hit[20] = (reg_addr == SNITCH_CLUSTER_PERIPHERAL_PERF_COUNTER_SELECT_4_OFFSET);
    addr_hit[21] = (reg_addr == SNITCH_CLUSTER_PERIPHERAL_PERF_COUNTER_SELECT_5_OFFSET);
    addr_hit[22] = (reg_addr == SNITCH_CLUSTER_PERIPHERAL_PERF_COUNTER_SELECT_6_OFFSET);
    addr_hit[23] = (reg_addr == SNITCH_CLUSTER_PERIPHERAL_PERF_COUNTER_SELECT_7_OFFSET);
    addr_hit[24] = (reg_addr == SNITCH_CLUSTER_PERIPHERAL_PERF_COUNTER_SELECT_8_OFFSET);
    addr_hit[25] = (reg_addr == SNITCH_CLUSTER_PERIPHERAL_PERF_COUNTER_SELECT_9_OFFSET);
    addr_hit[26] = (reg_addr == SNITCH_CLUSTER_PERIPHERAL_PERF_COUNTER_SELECT_10_OFFSET);
    addr_hit[27] = (reg_addr == SNITCH_CLUSTER_PERIPHERAL_PERF_COUNTER_SELECT_11_OFFSET);
    addr_hit[28] = (reg_addr == SNITCH_CLUSTER_PERIPHERAL_PERF_COUNTER_SELECT_12_OFFSET);
    addr_hit[29] = (reg_addr == SNITCH_CLUSTER_PERIPHERAL_PERF_COUNTER_SELECT_13_OFFSET);
    addr_hit[30] = (reg_addr == SNITCH_CLUSTER_PERIPHERAL_PERF_COUNTER_SELECT_14_OFFSET);
    addr_hit[31] = (reg_addr == SNITCH_CLUSTER_PERIPHERAL_PERF_COUNTER_SELECT_15_OFFSET);
    addr_hit[32] = (reg_addr == SNITCH_CLUSTER_PERIPHERAL_PERF_COUNTER_HART_SELECT_0_OFFSET);
    addr_hit[33] = (reg_addr == SNITCH_CLUSTER_PERIPHERAL_PERF_COUNTER_HART_SELECT_1_OFFSET);
    addr_hit[34] = (reg_addr == SNITCH_CLUSTER_PERIPHERAL_PERF_COUNTER_HART_SELECT_2_OFFSET);
    addr_hit[35] = (reg_addr == SNITCH_CLUSTER_PERIPHERAL_PERF_COUNTER_HART_SELECT_3_OFFSET);
    addr_hit[36] = (reg_addr == SNITCH_CLUSTER_PERIPHERAL_PERF_COUNTER_HART_SELECT_4_OFFSET);
    addr_hit[37] = (reg_addr == SNITCH_CLUSTER_PERIPHERAL_PERF_COUNTER_HART_SELECT_5_OFFSET);
    addr_hit[38] = (reg_addr == SNITCH_CLUSTER_PERIPHERAL_PERF_COUNTER_HART_SELECT_6_OFFSET);
    addr_hit[39] = (reg_addr == SNITCH_CLUSTER_PERIPHERAL_PERF_COUNTER_HART_SELECT_7_OFFSET);
    addr_hit[40] = (reg_addr == SNITCH_CLUSTER_PERIPHERAL_PERF_COUNTER_HART_SELECT_8_OFFSET);
    addr_hit[41] = (reg_addr == SNITCH_CLUSTER_PERIPHERAL_PERF_COUNTER_HART_SELECT_9_OFFSET);
    addr_hit[42] = (reg_addr == SNITCH_CLUSTER_PERIPHERAL_PERF_COUNTER_HART_SELECT_10_OFFSET);
    addr_hit[43] = (reg_addr == SNITCH_CLUSTER_PERIPHERAL_PERF_COUNTER_HART_SELECT_11_OFFSET);
    addr_hit[44] = (reg_addr == SNITCH_CLUSTER_PERIPHERAL_PERF_COUNTER_HART_SELECT_12_OFFSET);
    addr_hit[45] = (reg_addr == SNITCH_CLUSTER_PERIPHERAL_PERF_COUNTER_HART_SELECT_13_OFFSET);
    addr_hit[46] = (reg_addr == SNITCH_CLUSTER_PERIPHERAL_PERF_COUNTER_HART_SELECT_14_OFFSET);
    addr_hit[47] = (reg_addr == SNITCH_CLUSTER_PERIPHERAL_PERF_COUNTER_HART_SELECT_15_OFFSET);
    addr_hit[48] = (reg_addr == SNITCH_CLUSTER_PERIPHERAL_PERF_COUNTER_0_OFFSET);
    addr_hit[49] = (reg_addr == SNITCH_CLUSTER_PERIPHERAL_PERF_COUNTER_1_OFFSET);
    addr_hit[50] = (reg_addr == SNITCH_CLUSTER_PERIPHERAL_PERF_COUNTER_2_OFFSET);
    addr_hit[51] = (reg_addr == SNITCH_CLUSTER_PERIPHERAL_PERF_COUNTER_3_OFFSET);
    addr_hit[52] = (reg_addr == SNITCH_CLUSTER_PERIPHERAL_PERF_COUNTER_4_OFFSET);
    addr_hit[53] = (reg_addr == SNITCH_CLUSTER_PERIPHERAL_PERF_COUNTER_5_OFFSET);
    addr_hit[54] = (reg_addr == SNITCH_CLUSTER_PERIPHERAL_PERF_COUNTER_6_OFFSET);
    addr_hit[55] = (reg_addr == SNITCH_CLUSTER_PERIPHERAL_PERF_COUNTER_7_OFFSET);
    addr_hit[56] = (reg_addr == SNITCH_CLUSTER_PERIPHERAL_PERF_COUNTER_8_OFFSET);
    addr_hit[57] = (reg_addr == SNITCH_CLUSTER_PERIPHERAL_PERF_COUNTER_9_OFFSET);
    addr_hit[58] = (reg_addr == SNITCH_CLUSTER_PERIPHERAL_PERF_COUNTER_10_OFFSET);
    addr_hit[59] = (reg_addr == SNITCH_CLUSTER_PERIPHERAL_PERF_COUNTER_11_OFFSET);
    addr_hit[60] = (reg_addr == SNITCH_CLUSTER_PERIPHERAL_PERF_COUNTER_12_OFFSET);
    addr_hit[61] = (reg_addr == SNITCH_CLUSTER_PERIPHERAL_PERF_COUNTER_13_OFFSET);
    addr_hit[62] = (reg_addr == SNITCH_CLUSTER_PERIPHERAL_PERF_COUNTER_14_OFFSET);
    addr_hit[63] = (reg_addr == SNITCH_CLUSTER_PERIPHERAL_PERF_COUNTER_15_OFFSET);
    addr_hit[64] = (reg_addr == SNITCH_CLUSTER_PERIPHERAL_CL_CLINT_SET_OFFSET);
    addr_hit[65] = (reg_addr == SNITCH_CLUSTER_PERIPHERAL_CL_CLINT_CLEAR_OFFSET);
    addr_hit[66] = (reg_addr == SNITCH_CLUSTER_PERIPHERAL_HW_BARRIER_OFFSET);
    addr_hit[67] = (reg_addr == SNITCH_CLUSTER_PERIPHERAL_ICACHE_PREFETCH_ENABLE_OFFSET);
  end

  assign addrmiss = (reg_re || reg_we) ? ~|addr_hit : 1'b0 ;

  // Check sub-word write is permitted
  always_comb begin
    wr_err = (reg_we &
              ((addr_hit[ 0] & (|(SNITCH_CLUSTER_PERIPHERAL_PERMIT[ 0] & ~reg_be))) |
               (addr_hit[ 1] & (|(SNITCH_CLUSTER_PERIPHERAL_PERMIT[ 1] & ~reg_be))) |
               (addr_hit[ 2] & (|(SNITCH_CLUSTER_PERIPHERAL_PERMIT[ 2] & ~reg_be))) |
               (addr_hit[ 3] & (|(SNITCH_CLUSTER_PERIPHERAL_PERMIT[ 3] & ~reg_be))) |
               (addr_hit[ 4] & (|(SNITCH_CLUSTER_PERIPHERAL_PERMIT[ 4] & ~reg_be))) |
               (addr_hit[ 5] & (|(SNITCH_CLUSTER_PERIPHERAL_PERMIT[ 5] & ~reg_be))) |
               (addr_hit[ 6] & (|(SNITCH_CLUSTER_PERIPHERAL_PERMIT[ 6] & ~reg_be))) |
               (addr_hit[ 7] & (|(SNITCH_CLUSTER_PERIPHERAL_PERMIT[ 7] & ~reg_be))) |
               (addr_hit[ 8] & (|(SNITCH_CLUSTER_PERIPHERAL_PERMIT[ 8] & ~reg_be))) |
               (addr_hit[ 9] & (|(SNITCH_CLUSTER_PERIPHERAL_PERMIT[ 9] & ~reg_be))) |
               (addr_hit[10] & (|(SNITCH_CLUSTER_PERIPHERAL_PERMIT[10] & ~reg_be))) |
               (addr_hit[11] & (|(SNITCH_CLUSTER_PERIPHERAL_PERMIT[11] & ~reg_be))) |
               (addr_hit[12] & (|(SNITCH_CLUSTER_PERIPHERAL_PERMIT[12] & ~reg_be))) |
               (addr_hit[13] & (|(SNITCH_CLUSTER_PERIPHERAL_PERMIT[13] & ~reg_be))) |
               (addr_hit[14] & (|(SNITCH_CLUSTER_PERIPHERAL_PERMIT[14] & ~reg_be))) |
               (addr_hit[15] & (|(SNITCH_CLUSTER_PERIPHERAL_PERMIT[15] & ~reg_be))) |
               (addr_hit[16] & (|(SNITCH_CLUSTER_PERIPHERAL_PERMIT[16] & ~reg_be))) |
               (addr_hit[17] & (|(SNITCH_CLUSTER_PERIPHERAL_PERMIT[17] & ~reg_be))) |
               (addr_hit[18] & (|(SNITCH_CLUSTER_PERIPHERAL_PERMIT[18] & ~reg_be))) |
               (addr_hit[19] & (|(SNITCH_CLUSTER_PERIPHERAL_PERMIT[19] & ~reg_be))) |
               (addr_hit[20] & (|(SNITCH_CLUSTER_PERIPHERAL_PERMIT[20] & ~reg_be))) |
               (addr_hit[21] & (|(SNITCH_CLUSTER_PERIPHERAL_PERMIT[21] & ~reg_be))) |
               (addr_hit[22] & (|(SNITCH_CLUSTER_PERIPHERAL_PERMIT[22] & ~reg_be))) |
               (addr_hit[23] & (|(SNITCH_CLUSTER_PERIPHERAL_PERMIT[23] & ~reg_be))) |
               (addr_hit[24] & (|(SNITCH_CLUSTER_PERIPHERAL_PERMIT[24] & ~reg_be))) |
               (addr_hit[25] & (|(SNITCH_CLUSTER_PERIPHERAL_PERMIT[25] & ~reg_be))) |
               (addr_hit[26] & (|(SNITCH_CLUSTER_PERIPHERAL_PERMIT[26] & ~reg_be))) |
               (addr_hit[27] & (|(SNITCH_CLUSTER_PERIPHERAL_PERMIT[27] & ~reg_be))) |
               (addr_hit[28] & (|(SNITCH_CLUSTER_PERIPHERAL_PERMIT[28] & ~reg_be))) |
               (addr_hit[29] & (|(SNITCH_CLUSTER_PERIPHERAL_PERMIT[29] & ~reg_be))) |
               (addr_hit[30] & (|(SNITCH_CLUSTER_PERIPHERAL_PERMIT[30] & ~reg_be))) |
               (addr_hit[31] & (|(SNITCH_CLUSTER_PERIPHERAL_PERMIT[31] & ~reg_be))) |
               (addr_hit[32] & (|(SNITCH_CLUSTER_PERIPHERAL_PERMIT[32] & ~reg_be))) |
               (addr_hit[33] & (|(SNITCH_CLUSTER_PERIPHERAL_PERMIT[33] & ~reg_be))) |
               (addr_hit[34] & (|(SNITCH_CLUSTER_PERIPHERAL_PERMIT[34] & ~reg_be))) |
               (addr_hit[35] & (|(SNITCH_CLUSTER_PERIPHERAL_PERMIT[35] & ~reg_be))) |
               (addr_hit[36] & (|(SNITCH_CLUSTER_PERIPHERAL_PERMIT[36] & ~reg_be))) |
               (addr_hit[37] & (|(SNITCH_CLUSTER_PERIPHERAL_PERMIT[37] & ~reg_be))) |
               (addr_hit[38] & (|(SNITCH_CLUSTER_PERIPHERAL_PERMIT[38] & ~reg_be))) |
               (addr_hit[39] & (|(SNITCH_CLUSTER_PERIPHERAL_PERMIT[39] & ~reg_be))) |
               (addr_hit[40] & (|(SNITCH_CLUSTER_PERIPHERAL_PERMIT[40] & ~reg_be))) |
               (addr_hit[41] & (|(SNITCH_CLUSTER_PERIPHERAL_PERMIT[41] & ~reg_be))) |
               (addr_hit[42] & (|(SNITCH_CLUSTER_PERIPHERAL_PERMIT[42] & ~reg_be))) |
               (addr_hit[43] & (|(SNITCH_CLUSTER_PERIPHERAL_PERMIT[43] & ~reg_be))) |
               (addr_hit[44] & (|(SNITCH_CLUSTER_PERIPHERAL_PERMIT[44] & ~reg_be))) |
               (addr_hit[45] & (|(SNITCH_CLUSTER_PERIPHERAL_PERMIT[45] & ~reg_be))) |
               (addr_hit[46] & (|(SNITCH_CLUSTER_PERIPHERAL_PERMIT[46] & ~reg_be))) |
               (addr_hit[47] & (|(SNITCH_CLUSTER_PERIPHERAL_PERMIT[47] & ~reg_be))) |
               (addr_hit[48] & (|(SNITCH_CLUSTER_PERIPHERAL_PERMIT[48] & ~reg_be))) |
               (addr_hit[49] & (|(SNITCH_CLUSTER_PERIPHERAL_PERMIT[49] & ~reg_be))) |
               (addr_hit[50] & (|(SNITCH_CLUSTER_PERIPHERAL_PERMIT[50] & ~reg_be))) |
               (addr_hit[51] & (|(SNITCH_CLUSTER_PERIPHERAL_PERMIT[51] & ~reg_be))) |
               (addr_hit[52] & (|(SNITCH_CLUSTER_PERIPHERAL_PERMIT[52] & ~reg_be))) |
               (addr_hit[53] & (|(SNITCH_CLUSTER_PERIPHERAL_PERMIT[53] & ~reg_be))) |
               (addr_hit[54] & (|(SNITCH_CLUSTER_PERIPHERAL_PERMIT[54] & ~reg_be))) |
               (addr_hit[55] & (|(SNITCH_CLUSTER_PERIPHERAL_PERMIT[55] & ~reg_be))) |
               (addr_hit[56] & (|(SNITCH_CLUSTER_PERIPHERAL_PERMIT[56] & ~reg_be))) |
               (addr_hit[57] & (|(SNITCH_CLUSTER_PERIPHERAL_PERMIT[57] & ~reg_be))) |
               (addr_hit[58] & (|(SNITCH_CLUSTER_PERIPHERAL_PERMIT[58] & ~reg_be))) |
               (addr_hit[59] & (|(SNITCH_CLUSTER_PERIPHERAL_PERMIT[59] & ~reg_be))) |
               (addr_hit[60] & (|(SNITCH_CLUSTER_PERIPHERAL_PERMIT[60] & ~reg_be))) |
               (addr_hit[61] & (|(SNITCH_CLUSTER_PERIPHERAL_PERMIT[61] & ~reg_be))) |
               (addr_hit[62] & (|(SNITCH_CLUSTER_PERIPHERAL_PERMIT[62] & ~reg_be))) |
               (addr_hit[63] & (|(SNITCH_CLUSTER_PERIPHERAL_PERMIT[63] & ~reg_be))) |
               (addr_hit[64] & (|(SNITCH_CLUSTER_PERIPHERAL_PERMIT[64] & ~reg_be))) |
               (addr_hit[65] & (|(SNITCH_CLUSTER_PERIPHERAL_PERMIT[65] & ~reg_be))) |
               (addr_hit[66] & (|(SNITCH_CLUSTER_PERIPHERAL_PERMIT[66] & ~reg_be))) |
               (addr_hit[67] & (|(SNITCH_CLUSTER_PERIPHERAL_PERMIT[67] & ~reg_be)))));
  end

  assign perf_counter_enable_0_we = addr_hit[0] & reg_we & !reg_error;
  assign perf_counter_enable_0_wd = reg_wdata[0];

  assign perf_counter_enable_1_we = addr_hit[1] & reg_we & !reg_error;
  assign perf_counter_enable_1_wd = reg_wdata[0];

  assign perf_counter_enable_2_we = addr_hit[2] & reg_we & !reg_error;
  assign perf_counter_enable_2_wd = reg_wdata[0];

  assign perf_counter_enable_3_we = addr_hit[3] & reg_we & !reg_error;
  assign perf_counter_enable_3_wd = reg_wdata[0];

  assign perf_counter_enable_4_we = addr_hit[4] & reg_we & !reg_error;
  assign perf_counter_enable_4_wd = reg_wdata[0];

  assign perf_counter_enable_5_we = addr_hit[5] & reg_we & !reg_error;
  assign perf_counter_enable_5_wd = reg_wdata[0];

  assign perf_counter_enable_6_we = addr_hit[6] & reg_we & !reg_error;
  assign perf_counter_enable_6_wd = reg_wdata[0];

  assign perf_counter_enable_7_we = addr_hit[7] & reg_we & !reg_error;
  assign perf_counter_enable_7_wd = reg_wdata[0];

  assign perf_counter_enable_8_we = addr_hit[8] & reg_we & !reg_error;
  assign perf_counter_enable_8_wd = reg_wdata[0];

  assign perf_counter_enable_9_we = addr_hit[9] & reg_we & !reg_error;
  assign perf_counter_enable_9_wd = reg_wdata[0];

  assign perf_counter_enable_10_we = addr_hit[10] & reg_we & !reg_error;
  assign perf_counter_enable_10_wd = reg_wdata[0];

  assign perf_counter_enable_11_we = addr_hit[11] & reg_we & !reg_error;
  assign perf_counter_enable_11_wd = reg_wdata[0];

  assign perf_counter_enable_12_we = addr_hit[12] & reg_we & !reg_error;
  assign perf_counter_enable_12_wd = reg_wdata[0];

  assign perf_counter_enable_13_we = addr_hit[13] & reg_we & !reg_error;
  assign perf_counter_enable_13_wd = reg_wdata[0];

  assign perf_counter_enable_14_we = addr_hit[14] & reg_we & !reg_error;
  assign perf_counter_enable_14_wd = reg_wdata[0];

  assign perf_counter_enable_15_we = addr_hit[15] & reg_we & !reg_error;
  assign perf_counter_enable_15_wd = reg_wdata[0];

  assign perf_counter_select_0_we = addr_hit[16] & reg_we & !reg_error;
  assign perf_counter_select_0_wd = reg_wdata[9:0];
  assign perf_counter_select_0_re = addr_hit[16] & reg_re & !reg_error;

  assign perf_counter_select_1_we = addr_hit[17] & reg_we & !reg_error;
  assign perf_counter_select_1_wd = reg_wdata[9:0];
  assign perf_counter_select_1_re = addr_hit[17] & reg_re & !reg_error;

  assign perf_counter_select_2_we = addr_hit[18] & reg_we & !reg_error;
  assign perf_counter_select_2_wd = reg_wdata[9:0];
  assign perf_counter_select_2_re = addr_hit[18] & reg_re & !reg_error;

  assign perf_counter_select_3_we = addr_hit[19] & reg_we & !reg_error;
  assign perf_counter_select_3_wd = reg_wdata[9:0];
  assign perf_counter_select_3_re = addr_hit[19] & reg_re & !reg_error;

  assign perf_counter_select_4_we = addr_hit[20] & reg_we & !reg_error;
  assign perf_counter_select_4_wd = reg_wdata[9:0];
  assign perf_counter_select_4_re = addr_hit[20] & reg_re & !reg_error;

  assign perf_counter_select_5_we = addr_hit[21] & reg_we & !reg_error;
  assign perf_counter_select_5_wd = reg_wdata[9:0];
  assign perf_counter_select_5_re = addr_hit[21] & reg_re & !reg_error;

  assign perf_counter_select_6_we = addr_hit[22] & reg_we & !reg_error;
  assign perf_counter_select_6_wd = reg_wdata[9:0];
  assign perf_counter_select_6_re = addr_hit[22] & reg_re & !reg_error;

  assign perf_counter_select_7_we = addr_hit[23] & reg_we & !reg_error;
  assign perf_counter_select_7_wd = reg_wdata[9:0];
  assign perf_counter_select_7_re = addr_hit[23] & reg_re & !reg_error;

  assign perf_counter_select_8_we = addr_hit[24] & reg_we & !reg_error;
  assign perf_counter_select_8_wd = reg_wdata[9:0];
  assign perf_counter_select_8_re = addr_hit[24] & reg_re & !reg_error;

  assign perf_counter_select_9_we = addr_hit[25] & reg_we & !reg_error;
  assign perf_counter_select_9_wd = reg_wdata[9:0];
  assign perf_counter_select_9_re = addr_hit[25] & reg_re & !reg_error;

  assign perf_counter_select_10_we = addr_hit[26] & reg_we & !reg_error;
  assign perf_counter_select_10_wd = reg_wdata[9:0];
  assign perf_counter_select_10_re = addr_hit[26] & reg_re & !reg_error;

  assign perf_counter_select_11_we = addr_hit[27] & reg_we & !reg_error;
  assign perf_counter_select_11_wd = reg_wdata[9:0];
  assign perf_counter_select_11_re = addr_hit[27] & reg_re & !reg_error;

  assign perf_counter_select_12_we = addr_hit[28] & reg_we & !reg_error;
  assign perf_counter_select_12_wd = reg_wdata[9:0];
  assign perf_counter_select_12_re = addr_hit[28] & reg_re & !reg_error;

  assign perf_counter_select_13_we = addr_hit[29] & reg_we & !reg_error;
  assign perf_counter_select_13_wd = reg_wdata[9:0];
  assign perf_counter_select_13_re = addr_hit[29] & reg_re & !reg_error;

  assign perf_counter_select_14_we = addr_hit[30] & reg_we & !reg_error;
  assign perf_counter_select_14_wd = reg_wdata[9:0];
  assign perf_counter_select_14_re = addr_hit[30] & reg_re & !reg_error;

  assign perf_counter_select_15_we = addr_hit[31] & reg_we & !reg_error;
  assign perf_counter_select_15_wd = reg_wdata[9:0];
  assign perf_counter_select_15_re = addr_hit[31] & reg_re & !reg_error;

  assign perf_counter_hart_select_0_we = addr_hit[32] & reg_we & !reg_error;
  assign perf_counter_hart_select_0_wd = reg_wdata[9:0];

  assign perf_counter_hart_select_1_we = addr_hit[33] & reg_we & !reg_error;
  assign perf_counter_hart_select_1_wd = reg_wdata[9:0];

  assign perf_counter_hart_select_2_we = addr_hit[34] & reg_we & !reg_error;
  assign perf_counter_hart_select_2_wd = reg_wdata[9:0];

  assign perf_counter_hart_select_3_we = addr_hit[35] & reg_we & !reg_error;
  assign perf_counter_hart_select_3_wd = reg_wdata[9:0];

  assign perf_counter_hart_select_4_we = addr_hit[36] & reg_we & !reg_error;
  assign perf_counter_hart_select_4_wd = reg_wdata[9:0];

  assign perf_counter_hart_select_5_we = addr_hit[37] & reg_we & !reg_error;
  assign perf_counter_hart_select_5_wd = reg_wdata[9:0];

  assign perf_counter_hart_select_6_we = addr_hit[38] & reg_we & !reg_error;
  assign perf_counter_hart_select_6_wd = reg_wdata[9:0];

  assign perf_counter_hart_select_7_we = addr_hit[39] & reg_we & !reg_error;
  assign perf_counter_hart_select_7_wd = reg_wdata[9:0];

  assign perf_counter_hart_select_8_we = addr_hit[40] & reg_we & !reg_error;
  assign perf_counter_hart_select_8_wd = reg_wdata[9:0];

  assign perf_counter_hart_select_9_we = addr_hit[41] & reg_we & !reg_error;
  assign perf_counter_hart_select_9_wd = reg_wdata[9:0];

  assign perf_counter_hart_select_10_we = addr_hit[42] & reg_we & !reg_error;
  assign perf_counter_hart_select_10_wd = reg_wdata[9:0];

  assign perf_counter_hart_select_11_we = addr_hit[43] & reg_we & !reg_error;
  assign perf_counter_hart_select_11_wd = reg_wdata[9:0];

  assign perf_counter_hart_select_12_we = addr_hit[44] & reg_we & !reg_error;
  assign perf_counter_hart_select_12_wd = reg_wdata[9:0];

  assign perf_counter_hart_select_13_we = addr_hit[45] & reg_we & !reg_error;
  assign perf_counter_hart_select_13_wd = reg_wdata[9:0];

  assign perf_counter_hart_select_14_we = addr_hit[46] & reg_we & !reg_error;
  assign perf_counter_hart_select_14_wd = reg_wdata[9:0];

  assign perf_counter_hart_select_15_we = addr_hit[47] & reg_we & !reg_error;
  assign perf_counter_hart_select_15_wd = reg_wdata[9:0];

  assign perf_counter_0_we = addr_hit[48] & reg_we & !reg_error;
  assign perf_counter_0_wd = reg_wdata[47:0];
  assign perf_counter_0_re = addr_hit[48] & reg_re & !reg_error;

  assign perf_counter_1_we = addr_hit[49] & reg_we & !reg_error;
  assign perf_counter_1_wd = reg_wdata[47:0];
  assign perf_counter_1_re = addr_hit[49] & reg_re & !reg_error;

  assign perf_counter_2_we = addr_hit[50] & reg_we & !reg_error;
  assign perf_counter_2_wd = reg_wdata[47:0];
  assign perf_counter_2_re = addr_hit[50] & reg_re & !reg_error;

  assign perf_counter_3_we = addr_hit[51] & reg_we & !reg_error;
  assign perf_counter_3_wd = reg_wdata[47:0];
  assign perf_counter_3_re = addr_hit[51] & reg_re & !reg_error;

  assign perf_counter_4_we = addr_hit[52] & reg_we & !reg_error;
  assign perf_counter_4_wd = reg_wdata[47:0];
  assign perf_counter_4_re = addr_hit[52] & reg_re & !reg_error;

  assign perf_counter_5_we = addr_hit[53] & reg_we & !reg_error;
  assign perf_counter_5_wd = reg_wdata[47:0];
  assign perf_counter_5_re = addr_hit[53] & reg_re & !reg_error;

  assign perf_counter_6_we = addr_hit[54] & reg_we & !reg_error;
  assign perf_counter_6_wd = reg_wdata[47:0];
  assign perf_counter_6_re = addr_hit[54] & reg_re & !reg_error;

  assign perf_counter_7_we = addr_hit[55] & reg_we & !reg_error;
  assign perf_counter_7_wd = reg_wdata[47:0];
  assign perf_counter_7_re = addr_hit[55] & reg_re & !reg_error;

  assign perf_counter_8_we = addr_hit[56] & reg_we & !reg_error;
  assign perf_counter_8_wd = reg_wdata[47:0];
  assign perf_counter_8_re = addr_hit[56] & reg_re & !reg_error;

  assign perf_counter_9_we = addr_hit[57] & reg_we & !reg_error;
  assign perf_counter_9_wd = reg_wdata[47:0];
  assign perf_counter_9_re = addr_hit[57] & reg_re & !reg_error;

  assign perf_counter_10_we = addr_hit[58] & reg_we & !reg_error;
  assign perf_counter_10_wd = reg_wdata[47:0];
  assign perf_counter_10_re = addr_hit[58] & reg_re & !reg_error;

  assign perf_counter_11_we = addr_hit[59] & reg_we & !reg_error;
  assign perf_counter_11_wd = reg_wdata[47:0];
  assign perf_counter_11_re = addr_hit[59] & reg_re & !reg_error;

  assign perf_counter_12_we = addr_hit[60] & reg_we & !reg_error;
  assign perf_counter_12_wd = reg_wdata[47:0];
  assign perf_counter_12_re = addr_hit[60] & reg_re & !reg_error;

  assign perf_counter_13_we = addr_hit[61] & reg_we & !reg_error;
  assign perf_counter_13_wd = reg_wdata[47:0];
  assign perf_counter_13_re = addr_hit[61] & reg_re & !reg_error;

  assign perf_counter_14_we = addr_hit[62] & reg_we & !reg_error;
  assign perf_counter_14_wd = reg_wdata[47:0];
  assign perf_counter_14_re = addr_hit[62] & reg_re & !reg_error;

  assign perf_counter_15_we = addr_hit[63] & reg_we & !reg_error;
  assign perf_counter_15_wd = reg_wdata[47:0];
  assign perf_counter_15_re = addr_hit[63] & reg_re & !reg_error;

  assign cl_clint_set_we = addr_hit[64] & reg_we & !reg_error;
  assign cl_clint_set_wd = reg_wdata[31:0];

  assign cl_clint_clear_we = addr_hit[65] & reg_we & !reg_error;
  assign cl_clint_clear_wd = reg_wdata[31:0];

  assign hw_barrier_re = addr_hit[66] & reg_re & !reg_error;

  assign icache_prefetch_enable_we = addr_hit[67] & reg_we & !reg_error;
  assign icache_prefetch_enable_wd = reg_wdata[0];

  // Read data return
  always_comb begin
    reg_rdata_next = '0;
    unique case (1'b1)
      addr_hit[0]: begin
        reg_rdata_next[0] = perf_counter_enable_0_qs;
      end

      addr_hit[1]: begin
        reg_rdata_next[0] = perf_counter_enable_1_qs;
      end

      addr_hit[2]: begin
        reg_rdata_next[0] = perf_counter_enable_2_qs;
      end

      addr_hit[3]: begin
        reg_rdata_next[0] = perf_counter_enable_3_qs;
      end

      addr_hit[4]: begin
        reg_rdata_next[0] = perf_counter_enable_4_qs;
      end

      addr_hit[5]: begin
        reg_rdata_next[0] = perf_counter_enable_5_qs;
      end

      addr_hit[6]: begin
        reg_rdata_next[0] = perf_counter_enable_6_qs;
      end

      addr_hit[7]: begin
        reg_rdata_next[0] = perf_counter_enable_7_qs;
      end

      addr_hit[8]: begin
        reg_rdata_next[0] = perf_counter_enable_8_qs;
      end

      addr_hit[9]: begin
        reg_rdata_next[0] = perf_counter_enable_9_qs;
      end

      addr_hit[10]: begin
        reg_rdata_next[0] = perf_counter_enable_10_qs;
      end

      addr_hit[11]: begin
        reg_rdata_next[0] = perf_counter_enable_11_qs;
      end

      addr_hit[12]: begin
        reg_rdata_next[0] = perf_counter_enable_12_qs;
      end

      addr_hit[13]: begin
        reg_rdata_next[0] = perf_counter_enable_13_qs;
      end

      addr_hit[14]: begin
        reg_rdata_next[0] = perf_counter_enable_14_qs;
      end

      addr_hit[15]: begin
        reg_rdata_next[0] = perf_counter_enable_15_qs;
      end

      addr_hit[16]: begin
        reg_rdata_next[9:0] = perf_counter_select_0_qs;
      end

      addr_hit[17]: begin
        reg_rdata_next[9:0] = perf_counter_select_1_qs;
      end

      addr_hit[18]: begin
        reg_rdata_next[9:0] = perf_counter_select_2_qs;
      end

      addr_hit[19]: begin
        reg_rdata_next[9:0] = perf_counter_select_3_qs;
      end

      addr_hit[20]: begin
        reg_rdata_next[9:0] = perf_counter_select_4_qs;
      end

      addr_hit[21]: begin
        reg_rdata_next[9:0] = perf_counter_select_5_qs;
      end

      addr_hit[22]: begin
        reg_rdata_next[9:0] = perf_counter_select_6_qs;
      end

      addr_hit[23]: begin
        reg_rdata_next[9:0] = perf_counter_select_7_qs;
      end

      addr_hit[24]: begin
        reg_rdata_next[9:0] = perf_counter_select_8_qs;
      end

      addr_hit[25]: begin
        reg_rdata_next[9:0] = perf_counter_select_9_qs;
      end

      addr_hit[26]: begin
        reg_rdata_next[9:0] = perf_counter_select_10_qs;
      end

      addr_hit[27]: begin
        reg_rdata_next[9:0] = perf_counter_select_11_qs;
      end

      addr_hit[28]: begin
        reg_rdata_next[9:0] = perf_counter_select_12_qs;
      end

      addr_hit[29]: begin
        reg_rdata_next[9:0] = perf_counter_select_13_qs;
      end

      addr_hit[30]: begin
        reg_rdata_next[9:0] = perf_counter_select_14_qs;
      end

      addr_hit[31]: begin
        reg_rdata_next[9:0] = perf_counter_select_15_qs;
      end

      addr_hit[32]: begin
        reg_rdata_next[9:0] = perf_counter_hart_select_0_qs;
      end

      addr_hit[33]: begin
        reg_rdata_next[9:0] = perf_counter_hart_select_1_qs;
      end

      addr_hit[34]: begin
        reg_rdata_next[9:0] = perf_counter_hart_select_2_qs;
      end

      addr_hit[35]: begin
        reg_rdata_next[9:0] = perf_counter_hart_select_3_qs;
      end

      addr_hit[36]: begin
        reg_rdata_next[9:0] = perf_counter_hart_select_4_qs;
      end

      addr_hit[37]: begin
        reg_rdata_next[9:0] = perf_counter_hart_select_5_qs;
      end

      addr_hit[38]: begin
        reg_rdata_next[9:0] = perf_counter_hart_select_6_qs;
      end

      addr_hit[39]: begin
        reg_rdata_next[9:0] = perf_counter_hart_select_7_qs;
      end

      addr_hit[40]: begin
        reg_rdata_next[9:0] = perf_counter_hart_select_8_qs;
      end

      addr_hit[41]: begin
        reg_rdata_next[9:0] = perf_counter_hart_select_9_qs;
      end

      addr_hit[42]: begin
        reg_rdata_next[9:0] = perf_counter_hart_select_10_qs;
      end

      addr_hit[43]: begin
        reg_rdata_next[9:0] = perf_counter_hart_select_11_qs;
      end

      addr_hit[44]: begin
        reg_rdata_next[9:0] = perf_counter_hart_select_12_qs;
      end

      addr_hit[45]: begin
        reg_rdata_next[9:0] = perf_counter_hart_select_13_qs;
      end

      addr_hit[46]: begin
        reg_rdata_next[9:0] = perf_counter_hart_select_14_qs;
      end

      addr_hit[47]: begin
        reg_rdata_next[9:0] = perf_counter_hart_select_15_qs;
      end

      addr_hit[48]: begin
        reg_rdata_next[47:0] = perf_counter_0_qs;
      end

      addr_hit[49]: begin
        reg_rdata_next[47:0] = perf_counter_1_qs;
      end

      addr_hit[50]: begin
        reg_rdata_next[47:0] = perf_counter_2_qs;
      end

      addr_hit[51]: begin
        reg_rdata_next[47:0] = perf_counter_3_qs;
      end

      addr_hit[52]: begin
        reg_rdata_next[47:0] = perf_counter_4_qs;
      end

      addr_hit[53]: begin
        reg_rdata_next[47:0] = perf_counter_5_qs;
      end

      addr_hit[54]: begin
        reg_rdata_next[47:0] = perf_counter_6_qs;
      end

      addr_hit[55]: begin
        reg_rdata_next[47:0] = perf_counter_7_qs;
      end

      addr_hit[56]: begin
        reg_rdata_next[47:0] = perf_counter_8_qs;
      end

      addr_hit[57]: begin
        reg_rdata_next[47:0] = perf_counter_9_qs;
      end

      addr_hit[58]: begin
        reg_rdata_next[47:0] = perf_counter_10_qs;
      end

      addr_hit[59]: begin
        reg_rdata_next[47:0] = perf_counter_11_qs;
      end

      addr_hit[60]: begin
        reg_rdata_next[47:0] = perf_counter_12_qs;
      end

      addr_hit[61]: begin
        reg_rdata_next[47:0] = perf_counter_13_qs;
      end

      addr_hit[62]: begin
        reg_rdata_next[47:0] = perf_counter_14_qs;
      end

      addr_hit[63]: begin
        reg_rdata_next[47:0] = perf_counter_15_qs;
      end

      addr_hit[64]: begin
        reg_rdata_next[31:0] = '0;
      end

      addr_hit[65]: begin
        reg_rdata_next[31:0] = '0;
      end

      addr_hit[66]: begin
        reg_rdata_next[31:0] = hw_barrier_qs;
      end

      addr_hit[67]: begin
        reg_rdata_next[0] = '0;
      end

      default: begin
        reg_rdata_next = '1;
      end
    endcase
  end

  // Unused signal tieoff

  // wdata / byte enable are not always fully used
  // add a blanket unused statement to handle lint waivers
  logic unused_wdata;
  logic unused_be;
  assign unused_wdata = ^reg_wdata;
  assign unused_be = ^reg_be;

  // Assertions for Register Interface
  `ASSERT(en2addrHit, (reg_we || reg_re) |-> $onehot0(addr_hit))

endmodule

module snitch_cluster_peripheral_reg_top_intf
#(
  parameter int AW = 10,
  localparam int DW = 64
) (
  input logic clk_i,
  input logic rst_ni,
  REG_BUS.in  regbus_slave,
  // To HW
  output snitch_cluster_peripheral_reg_pkg::snitch_cluster_peripheral_reg2hw_t reg2hw, // Write
  input  snitch_cluster_peripheral_reg_pkg::snitch_cluster_peripheral_hw2reg_t hw2reg, // Read
  // Config
  input devmode_i // If 1, explicit error return for unmapped register access
);
 localparam int unsigned STRB_WIDTH = DW/8;

`include "register_interface/typedef.svh"
`include "register_interface/assign.svh"

  // Define structs for reg_bus
  typedef logic [AW-1:0] addr_t;
  typedef logic [DW-1:0] data_t;
  typedef logic [STRB_WIDTH-1:0] strb_t;
  `REG_BUS_TYPEDEF_ALL(reg_bus, addr_t, data_t, strb_t)

  reg_bus_req_t s_reg_req;
  reg_bus_rsp_t s_reg_rsp;
  
  // Assign SV interface to structs
  `REG_BUS_ASSIGN_TO_REQ(s_reg_req, regbus_slave)
  `REG_BUS_ASSIGN_FROM_RSP(regbus_slave, s_reg_rsp)

  

  snitch_cluster_peripheral_reg_top #(
    .reg_req_t(reg_bus_req_t),
    .reg_rsp_t(reg_bus_rsp_t),
    .AW(AW)
  ) i_regs (
    .clk_i,
    .rst_ni,
    .reg_req_i(s_reg_req),
    .reg_rsp_o(s_reg_rsp),
    .reg2hw, // Write
    .hw2reg, // Read
    .devmode_i
  );
  
endmodule


